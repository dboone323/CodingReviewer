#!/bin/bash

# Universal Development Workflow Manager
# Standardizes development practices across all projects

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Project directories
PROJECTS_DIR="/Users/danielstevens/Desktop/Code/Projects"
SHARED_DIR="/Users/danielstevens/Desktop/Code/Shared"
TOOLS_DIR="/Users/danielstevens/Desktop/Code/Tools"
DOCS_DIR="/Users/danielstevens/Desktop/Code/Documentation"

print_header() {
    echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║     Universal Development Workflow     ║${NC}"
    echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
    echo ""
}

print_section() {
    echo -e "${YELLOW}▶ $1${NC}"
    echo "----------------------------------------"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Function to standardize git workflow across all projects
standardize_git_workflow() {
    print_section "Standardizing Git Workflow"
    
    for project in "$PROJECTS_DIR"/*; do
        if [ -d "$project" ] && [ -d "$project/.git" ]; then
            project_name=$(basename "$project")
            log_info "Processing $project_name..."
            
            cd "$project"
            
            # Ensure consistent branch naming
            current_branch=$(git branch --show-current)
            if [ "$current_branch" != "main" ] && [ "$current_branch" != "develop" ]; then
                log_info "Current branch: $current_branch"
                
                # Offer to create standardized branch structure
                if ! git show-ref --verify --quiet refs/heads/develop; then
                    git checkout -b develop 2>/dev/null || true
                    log_success "Created develop branch for $project_name"
                fi
            fi
            
            # Standardize gitignore
            create_standard_gitignore "$project"
            
            # Set up git hooks
            setup_git_hooks "$project"
            
            log_success "Git workflow standardized for $project_name"
        fi
    done
}

create_standard_gitignore() {
    local project_dir="$1"
    local gitignore_file="$project_dir/.gitignore"
    
    if [ ! -f "$gitignore_file" ] || ! grep -q "# Generated by Universal Workflow" "$gitignore_file"; then
        cat > "$gitignore_file" << 'EOF'
# Generated by Universal Workflow Manager
# macOS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Xcode
*.xcodeproj/project.xcworkspace/
*.xcodeproj/xcuserdata/
*.xcworkspace/xcuserdata/
build/
DerivedData/
*.ipa
*.xcarchive

# Swift Package Manager
.build/
Packages/
Package.resolved
.swiftpm/

# IDEs
.vscode/settings.json
.idea/
*.swp
*.swo
*~

# Testing
.nyc_output
coverage/
test-results/

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Dependencies
node_modules/
bower_components/

# Environment
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Temporary files
tmp/
temp/
*.tmp
*.temp

# Build outputs
dist/
out/
target/

# IDE specific
.vscode/
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
EOF
        log_success "Standard .gitignore created"
    fi
}

setup_git_hooks() {
    local project_dir="$1"
    local hooks_dir="$project_dir/.git/hooks"
    
    # Pre-commit hook for code quality
    cat > "$hooks_dir/pre-commit" << 'EOF'
#!/bin/bash
# Pre-commit hook for code quality checks

# Check for Swift files and run SwiftLint if available
swift_files=$(git diff --cached --name-only --diff-filter=ACM | grep '\.swift$')
if [ -n "$swift_files" ] && command -v swiftlint &> /dev/null; then
    echo "Running SwiftLint..."
    swiftlint lint --quiet
    if [ $? -ne 0 ]; then
        echo "SwiftLint failed. Please fix the issues before committing."
        exit 1
    fi
fi

# Check for large files
large_files=$(git diff --cached --name-only | xargs -I {} sh -c 'if [ -f "{}" ] && [ $(stat -f%z "{}") -gt 1048576 ]; then echo "{}"; fi')
if [ -n "$large_files" ]; then
    echo "Warning: Large files detected (>1MB):"
    echo "$large_files"
    echo "Consider using Git LFS for large files."
fi

# Check for TODO/FIXME in staged files
todos=$(git diff --cached | grep -n "TODO\|FIXME\|XXX" || true)
if [ -n "$todos" ]; then
    echo "Note: TODO/FIXME comments found in staged changes:"
    echo "$todos"
fi

exit 0
EOF
    
    chmod +x "$hooks_dir/pre-commit"
    log_success "Git hooks configured"
}

# Function to create unified testing framework
create_unified_testing() {
    print_section "Creating Unified Testing Framework"
    
    # Create shared testing utilities
    mkdir -p "$SHARED_DIR/Testing"
    
    cat > "$SHARED_DIR/Testing/TestUtilities.swift" << 'EOF'
import XCTest
import SwiftData

/// Shared testing utilities for all projects
@MainActor
class TestUtilities {
    
    /// Creates an in-memory ModelContainer for testing
    static func createTestContainer<T: PersistentModel>(for models: [T.Type]) throws -> ModelContainer {
        let schema = Schema(models)
        let configuration = ModelConfiguration(schema: schema, isStoredInMemoryOnly: true)
        return try ModelContainer(for: schema, configurations: [configuration])
    }
    
    /// Measures async operation performance
    static func measureAsync<T>(
        operation: String,
        timeout: TimeInterval = 10.0,
        operation: @escaping () async throws -> T
    ) async throws -> (result: T, duration: TimeInterval) {
        let startTime = Date()
        let result = try await operation()
        let duration = Date().timeIntervalSince(startTime)
        
        print("⏱️ \(operation) completed in \(String(format: "%.3f", duration))s")
        XCTAssertLessThan(duration, timeout, "\(operation) took too long")
        
        return (result: result, duration: duration)
    }
    
    /// Creates test data for different project types
    static func createTestTransaction() -> [String: Any] {
        return [
            "amount": 25.99,
            "description": "Test Transaction",
            "date": Date(),
            "type": "expense",
            "category": "Test Category"
        ]
    }
    
    static func createTestHabit() -> [String: Any] {
        return [
            "name": "Test Habit",
            "description": "Test habit description",
            "frequency": "daily",
            "isActive": true
        ]
    }
    
    static func createTestCodeFile() -> [String: Any] {
        return [
            "name": "TestFile.swift",
            "content": "import Foundation\n\nclass TestClass {\n    func testMethod() {\n        print(\"Hello, test!\")\n    }\n}",
            "language": "swift",
            "size": 100
        ]
    }
}

/// Performance assertion helpers
extension XCTestCase {
    
    /// Assert operation completes within time limit
    func assertPerformance<T>(
        operation: String,
        expectedTime: TimeInterval,
        _ block: () throws -> T
    ) rethrows -> T {
        let startTime = Date()
        let result = try block()
        let duration = Date().timeIntervalSince(startTime)
        
        XCTAssertLessThan(duration, expectedTime, 
                         "\(operation) took \(duration)s, expected < \(expectedTime)s")
        return result
    }
    
    /// Assert async operation completes within time limit
    func assertAsyncPerformance<T>(
        operation: String,
        expectedTime: TimeInterval,
        _ block: () async throws -> T
    ) async rethrows -> T {
        let startTime = Date()
        let result = try await block()
        let duration = Date().timeIntervalSince(startTime)
        
        XCTAssertLessThan(duration, expectedTime, 
                         "\(operation) took \(duration)s, expected < \(expectedTime)s")
        return result
    }
}

/// Mock data generators
struct MockDataGenerator {
    
    static func generateTransactions(count: Int) -> [[String: Any]] {
        return (1...count).map { i in
            [
                "id": UUID().uuidString,
                "amount": Double.random(in: 5.0...500.0),
                "description": "Transaction \(i)",
                "date": Date().addingTimeInterval(-Double(i * 86400)),
                "type": i % 2 == 0 ? "income" : "expense",
                "category": ["Food", "Transport", "Entertainment", "Bills", "Shopping"].randomElement()!
            ]
        }
    }
    
    static func generateHabits(count: Int) -> [[String: Any]] {
        let habitNames = ["Exercise", "Read", "Meditate", "Drink Water", "Walk", "Study", "Cook", "Sleep Early"]
        
        return (1...count).map { i in
            [
                "id": UUID().uuidString,
                "name": habitNames.randomElement() ?? "Habit \(i)",
                "description": "Description for habit \(i)",
                "frequency": ["daily", "weekly", "monthly"].randomElement()!,
                "isActive": Bool.random(),
                "streak": Int.random(in: 0...30)
            ]
        }
    }
    
    static func generateCodeFiles(count: Int) -> [[String: Any]] {
        let languages = ["swift", "javascript", "python", "java", "typescript"]
        let fileTypes = ["class", "function", "interface", "enum", "struct"]
        
        return (1...count).map { i in
            let language = languages.randomElement()!
            let fileType = fileTypes.randomElement()!
            
            return [
                "id": UUID().uuidString,
                "name": "\(fileType.capitalized)\(i).\(language)",
                "content": generateCodeContent(language: language, type: fileType, index: i),
                "language": language,
                "size": Int.random(in: 100...5000),
                "complexity": Int.random(in: 1...10)
            ]
        }
    }
    
    private static func generateCodeContent(language: String, type: String, index: Int) -> String {
        switch language {
        case "swift":
            return """
            import Foundation
            
            class \(type.capitalized)\(index) {
                private let property\(index): String
                
                init(property: String) {
                    self.property\(index) = property
                }
                
                func method\(index)() -> String {
                    return "Result from \(type) \(index): \\(property\(index))"
                }
            }
            """
        case "javascript":
            return """
            class \(type.capitalized)\(index) {
                constructor(property) {
                    this.property\(index) = property;
                }
                
                method\(index)() {
                    return `Result from \(type) \(index): ${this.property\(index)}`;
                }
            }
            
            module.exports = \(type.capitalized)\(index);
            """
        case "python":
            return """
            class \(type.capitalized)\(index):
                def __init__(self, property):
                    self.property\(index) = property
                
                def method\(index)(self):
                    return f"Result from \(type) \(index): {self.property\(index)}"
            """
        default:
            return "// \(type.capitalized)\(index) in \(language)"
        }
    }
}
EOF
    
    log_success "Unified testing framework created"
}

# Function to create development scripts for each project
create_dev_scripts() {
    print_section "Creating Development Scripts"
    
    for project in "$PROJECTS_DIR"/*; do
        if [ -d "$project" ]; then
            project_name=$(basename "$project")
            
            # Create universal dev.sh script
            cat > "$project/dev.sh" << 'EOF'
#!/bin/bash
# Universal development script

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

PROJECT_NAME=$(basename "$(pwd)")

print_usage() {
    echo "Universal Development Script for $PROJECT_NAME"
    echo ""
    echo "Usage: ./dev.sh [command]"
    echo ""
    echo "Commands:"
    echo "  build        Build the project"
    echo "  test         Run tests"
    echo "  lint         Run code linting"
    echo "  clean        Clean build artifacts"
    echo "  install      Install dependencies"
    echo "  format       Format code"
    echo "  check        Run all quality checks"
    echo "  run          Run the application"
    echo "  setup        Initial project setup"
    echo ""
}

log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Detect project type
detect_project_type() {
    if [ -f "Package.swift" ]; then
        echo "swift"
    elif [ -f "*.xcodeproj" ] || [ -f "*.xcworkspace" ]; then
        echo "xcode"
    elif [ -f "package.json" ]; then
        echo "node"
    elif [ -f "requirements.txt" ] || [ -f "setup.py" ]; then
        echo "python"
    else
        echo "unknown"
    fi
}

PROJECT_TYPE=$(detect_project_type)

# Command implementations
cmd_build() {
    log_info "Building $PROJECT_NAME ($PROJECT_TYPE)..."
    
    case $PROJECT_TYPE in
        "swift")
            swift build
            ;;
        "xcode")
            if [ -f "*.xcworkspace" ]; then
                xcodebuild -workspace *.xcworkspace -scheme "$PROJECT_NAME" build
            else
                xcodebuild -project *.xcodeproj -scheme "$PROJECT_NAME" build
            fi
            ;;
        "node")
            npm run build
            ;;
        "python")
            python -m build
            ;;
        *)
            log_error "Unknown project type"
            exit 1
            ;;
    esac
    
    log_success "Build completed"
}

cmd_test() {
    log_info "Running tests for $PROJECT_NAME..."
    
    case $PROJECT_TYPE in
        "swift")
            swift test
            ;;
        "xcode")
            if [ -f "*.xcworkspace" ]; then
                xcodebuild test -workspace *.xcworkspace -scheme "$PROJECT_NAME" -destination 'platform=macOS'
            else
                xcodebuild test -project *.xcodeproj -scheme "$PROJECT_NAME" -destination 'platform=macOS'
            fi
            ;;
        "node")
            npm test
            ;;
        "python")
            python -m pytest
            ;;
        *)
            log_error "No test configuration found"
            exit 1
            ;;
    esac
    
    log_success "Tests completed"
}

cmd_lint() {
    log_info "Running linting for $PROJECT_NAME..."
    
    case $PROJECT_TYPE in
        "swift"|"xcode")
            if command -v swiftlint &> /dev/null; then
                swiftlint
            else
                log_error "SwiftLint not installed. Install with: brew install swiftlint"
                exit 1
            fi
            ;;
        "node")
            npx eslint .
            ;;
        "python")
            if command -v flake8 &> /dev/null; then
                flake8 .
            else
                log_error "flake8 not installed. Install with: pip install flake8"
                exit 1
            fi
            ;;
        *)
            log_error "No linting configuration found"
            exit 1
            ;;
    esac
    
    log_success "Linting completed"
}

cmd_clean() {
    log_info "Cleaning $PROJECT_NAME..."
    
    case $PROJECT_TYPE in
        "swift")
            swift package clean
            ;;
        "xcode")
            rm -rf build/
            rm -rf DerivedData/
            ;;
        "node")
            rm -rf node_modules/
            rm -rf dist/
            ;;
        "python")
            rm -rf build/
            rm -rf dist/
            rm -rf *.egg-info/
            find . -type d -name __pycache__ -delete
            ;;
    esac
    
    log_success "Clean completed"
}

cmd_install() {
    log_info "Installing dependencies for $PROJECT_NAME..."
    
    case $PROJECT_TYPE in
        "swift")
            swift package resolve
            ;;
        "node")
            npm install
            ;;
        "python")
            pip install -r requirements.txt 2>/dev/null || log_info "No requirements.txt found"
            ;;
    esac
    
    log_success "Dependencies installed"
}

cmd_format() {
    log_info "Formatting code for $PROJECT_NAME..."
    
    case $PROJECT_TYPE in
        "swift"|"xcode")
            if command -v swiftformat &> /dev/null; then
                swiftformat .
            else
                log_error "SwiftFormat not installed. Install with: brew install swiftformat"
                exit 1
            fi
            ;;
        "node")
            npx prettier --write .
            ;;
        "python")
            if command -v black &> /dev/null; then
                black .
            else
                log_error "black not installed. Install with: pip install black"
                exit 1
            fi
            ;;
    esac
    
    log_success "Code formatted"
}

cmd_check() {
    log_info "Running all quality checks for $PROJECT_NAME..."
    
    cmd_lint
    cmd_test
    cmd_build
    
    log_success "All checks passed"
}

cmd_run() {
    log_info "Running $PROJECT_NAME..."
    
    case $PROJECT_TYPE in
        "swift")
            swift run
            ;;
        "node")
            npm start
            ;;
        "python")
            python main.py 2>/dev/null || python app.py 2>/dev/null || log_error "No main entry point found"
            ;;
        "xcode")
            log_info "For Xcode projects, build and run from Xcode IDE"
            ;;
    esac
}

cmd_setup() {
    log_info "Setting up $PROJECT_NAME development environment..."
    
    # Install dependencies
    cmd_install
    
    # Create necessary directories
    mkdir -p Tests
    mkdir -p Documentation
    
    # Setup git hooks if .git exists
    if [ -d ".git" ]; then
        # This would be called by the universal workflow manager
        log_info "Git repository detected"
    fi
    
    log_success "Setup completed"
}

# Main command dispatcher
case "${1:-help}" in
    "build")
        cmd_build
        ;;
    "test")
        cmd_test
        ;;
    "lint")
        cmd_lint
        ;;
    "clean")
        cmd_clean
        ;;
    "install")
        cmd_install
        ;;
    "format")
        cmd_format
        ;;
    "check")
        cmd_check
        ;;
    "run")
        cmd_run
        ;;
    "setup")
        cmd_setup
        ;;
    "help"|*)
        print_usage
        ;;
esac
EOF
            
            chmod +x "$project/dev.sh"
            log_success "Created dev.sh for $project_name"
        fi
    done
}

# Function to create quality gates
create_quality_gates() {
    print_section "Setting Up Quality Gates"
    
    # Create quality configuration
    cat > "$TOOLS_DIR/quality-config.yaml" << 'EOF'
# Quality Gates Configuration
quality_gates:
  code_coverage:
    minimum: 70
    target: 85
    
  test_performance:
    max_duration_seconds: 30
    
  build_performance:
    max_duration_seconds: 120
    
  code_quality:
    max_warnings: 5
    max_errors: 0
    
  file_limits:
    max_file_size_kb: 1000
    max_lines_per_file: 500
    
  complexity:
    max_cyclomatic_complexity: 10
    max_cognitive_complexity: 15

project_specific:
  CodingReviewer:
    test_coverage_minimum: 75
    max_file_uploads: 1000
    
  HabitQuest:
    test_coverage_minimum: 80
    performance_target_ms: 100
    
  MomentumFinance:
    test_coverage_minimum: 85
    data_integrity_checks: true
EOF
    
    log_success "Quality gates configured"
}

# Function to create monitoring dashboard
create_monitoring_dashboard() {
    print_section "Creating Monitoring Dashboard"
    
    cat > "$TOOLS_DIR/monitoring-dashboard.html" << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Development Workspace Monitor</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f5f5f7; }
        .header { background: #1d1d1f; color: white; padding: 20px; text-align: center; }
        .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
        .card { background: white; border-radius: 12px; padding: 20px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .metric { text-align: center; margin: 10px 0; }
        .metric-value { font-size: 2rem; font-weight: bold; color: #007AFF; }
        .metric-label { color: #666; font-size: 0.9rem; }
        .status-good { color: #28a745; }
        .status-warning { color: #ffc107; }
        .status-error { color: #dc3545; }
        .progress-bar { width: 100%; height: 8px; background: #e9ecef; border-radius: 4px; overflow: hidden; }
        .progress-fill { height: 100%; background: #007AFF; transition: width 0.3s ease; }
        .project-list { list-style: none; }
        .project-item { padding: 10px; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; align-items: center; }
    </style>
</head>
<body>
    <div class="header">
        <h1>📊 Development Workspace Monitor</h1>
        <p>Real-time overview of all projects</p>
    </div>
    
    <div class="container">
        <div class="grid">
            <!-- Project Overview -->
            <div class="card">
                <h2>📁 Project Overview</h2>
                <ul class="project-list" id="projectList">
                    <li class="project-item">
                        <span>CodingReviewer</span>
                        <span class="status-good">✅ Healthy</span>
                    </li>
                    <li class="project-item">
                        <span>HabitQuest</span>
                        <span class="status-good">✅ Healthy</span>
                    </li>
                    <li class="project-item">
                        <span>MomentumFinance</span>
                        <span class="status-warning">⚠️ Needs Tests</span>
                    </li>
                </ul>
            </div>
            
            <!-- Code Quality -->
            <div class="card">
                <h2>🎯 Code Quality</h2>
                <div class="metric">
                    <div class="metric-value status-good">87%</div>
                    <div class="metric-label">Overall Quality Score</div>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 87%"></div>
                </div>
            </div>
            
            <!-- Test Coverage -->
            <div class="card">
                <h2>🧪 Test Coverage</h2>
                <div class="metric">
                    <div class="metric-value status-warning">72%</div>
                    <div class="metric-label">Average Coverage</div>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: 72%"></div>
                </div>
            </div>
            
            <!-- Build Status -->
            <div class="card">
                <h2>🔨 Build Status</h2>
                <div class="metric">
                    <div class="metric-value status-good">3/3</div>
                    <div class="metric-label">Projects Building</div>
                </div>
                <div class="metric">
                    <div class="metric-value">42s</div>
                    <div class="metric-label">Average Build Time</div>
                </div>
            </div>
            
            <!-- Performance Metrics -->
            <div class="card">
                <h2>⚡ Performance</h2>
                <div class="metric">
                    <div class="metric-value status-good">Fast</div>
                    <div class="metric-label">Test Execution</div>
                </div>
                <div class="metric">
                    <div class="metric-value">95%</div>
                    <div class="metric-label">Success Rate</div>
                </div>
            </div>
            
            <!-- Recent Activity -->
            <div class="card">
                <h2>📈 Recent Activity</h2>
                <ul class="project-list">
                    <li class="project-item">
                        <span>✅ CodingReviewer tests passed</span>
                        <small>2 min ago</small>
                    </li>
                    <li class="project-item">
                        <span>🔨 HabitQuest build completed</span>
                        <small>5 min ago</small>
                    </li>
                    <li class="project-item">
                        <span>📝 MomentumFinance tests added</span>
                        <small>Just now</small>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    
    <script>
        // Auto-refresh every 30 seconds
        setInterval(() => {
            // In a real implementation, this would fetch data from the automation system
            console.log('Refreshing dashboard data...');
        }, 30000);
        
        // Simulate real-time updates
        function updateMetrics() {
            // This would be connected to the actual automation system
            const qualityScore = Math.floor(Math.random() * 20) + 80;
            const coverageScore = Math.floor(Math.random() * 30) + 70;
            
            document.querySelector('.metric-value.status-good').textContent = qualityScore + '%';
            document.querySelector('.metric-value.status-warning').textContent = coverageScore + '%';
        }
        
        // Update every 10 seconds for demo
        setInterval(updateMetrics, 10000);
    </script>
</body>
</html>
EOF
    
    log_success "Monitoring dashboard created"
}

# Main workflow manager function
main() {
    print_header
    
    if [ $# -eq 0 ]; then
        echo "Usage: $0 [command]"
        echo ""
        echo "Commands:"
        echo "  init        Initialize unified workflow"
        echo "  git         Standardize git workflow"
        echo "  test        Create unified testing"
        echo "  scripts     Create development scripts"
        echo "  quality     Set up quality gates"
        echo "  monitor     Create monitoring dashboard"
        echo "  all         Run all setup commands"
        exit 1
    fi
    
    case "$1" in
        "init"|"all")
            standardize_git_workflow
            create_unified_testing
            create_dev_scripts
            create_quality_gates
            create_monitoring_dashboard
            log_success "Unified development workflow initialized!"
            ;;
        "git")
            standardize_git_workflow
            ;;
        "test")
            create_unified_testing
            ;;
        "scripts")
            create_dev_scripts
            ;;
        "quality")
            create_quality_gates
            ;;
        "monitor")
            create_monitoring_dashboard
            ;;
        *)
            echo "Unknown command: $1"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
