{
  "project_path": "CodingReviewer/",
  "last_updated": "2025-07-30T12:39:45Z",
  "completion_data": {
    "symbols": [
      {"type": "class", "name": "SmartDocumentationGenerator", "file": "SmartDocumentationGenerator.swift"}
      {"type": "struct", "name": "GeneratedDocumentation", "file": "SmartDocumentationGenerator.swift"}
,
      {"type": "struct", "name": "DocumentationSection", "file": "SmartDocumentationGenerator.swift"}
,
      {"type": "struct", "name": "DocumentationSuggestion", "file": "SmartDocumentationGenerator.swift"}
      {"type": "enum", "name": "DocumentationType", "file": "SmartDocumentationGenerator.swift"}
,
      {"type": "enum", "name": "SuggestionType", "file": "SmartDocumentationGenerator.swift"}
,
      {"type": "enum", "name": "Priority", "file": "SmartDocumentationGenerator.swift"}
      {"type": "class", "name": "IntelligentCodeAnalyzer", "file": "IntelligentCodeAnalyzer.swift"}
      {"type": "struct", "name": "CodeIssue", "file": "IntelligentCodeAnalyzer.swift"}
,
      {"type": "struct", "name": "Recommendation", "file": "IntelligentCodeAnalyzer.swift"}
      {"type": "enum", "name": "IssueType", "file": "IntelligentCodeAnalyzer.swift"}
,
      {"type": "enum", "name": "Severity", "file": "IntelligentCodeAnalyzer.swift"}
,
      {"type": "enum", "name": "Category", "file": "IntelligentCodeAnalyzer.swift"}
,
      {"type": "enum", "name": "Priority", "file": "IntelligentCodeAnalyzer.swift"}
,
      {"type": "enum", "name": "AnalyzerError", "file": "IntelligentCodeAnalyzer.swift"}
      {"type": "struct", "name": "PatternAnalysisView", "file": "PatternAnalysisView.swift"}
,
      {"type": "struct", "name": "PatternsContentView", "file": "PatternAnalysisView.swift"}
,
      {"type": "struct", "name": "CodeSmellsContentView", "file": "PatternAnalysisView.swift"}
,
      {"type": "struct", "name": "PerformanceContentView", "file": "PatternAnalysisView.swift"}
,
      {"type": "struct", "name": "PatternCard", "file": "PatternAnalysisView.swift"}
,
      {"type": "struct", "name": "CodeSmellCard", "file": "PatternAnalysisView.swift"}
,
      {"type": "struct", "name": "PerformanceIssueCard", "file": "PatternAnalysisView.swift"}
,
      {"type": "struct", "name": "EmptyPatternStateView", "file": "PatternAnalysisView.swift"}
,
      {"type": "struct", "name": "UploadedFilesInfoView", "file": "PatternAnalysisView.swift"}
      {"type": "enum", "name": "PatternTab", "file": "PatternAnalysisView.swift"}
      {"type": "class", "name": "FixHistoryManager", "file": "DiffPreviewView.swift"}
      {"type": "struct", "name": "DiffPreviewView", "file": "DiffPreviewView.swift"}
,
      {"type": "struct", "name": "FixDetailsHeader", "file": "DiffPreviewView.swift"}
,
      {"type": "struct", "name": "DiffComparisonView", "file": "DiffPreviewView.swift"}
,
      {"type": "struct", "name": "DiffHeaderView", "file": "DiffPreviewView.swift"}
,
      {"type": "struct", "name": "CodeView", "file": "DiffPreviewView.swift"}
,
      {"type": "struct", "name": "CodeLineView", "file": "DiffPreviewView.swift"}
,
      {"type": "struct", "name": "FixHistoryEntry", "file": "DiffPreviewView.swift"}
      {"type": "enum", "name": "DiffHighlightType", "file": "DiffPreviewView.swift"}
      {"type": "class", "name": "FileManagerService", "file": "FileManagerService.swift"}
,
      {"type": "class", "name": "FileManagerLogger", "file": "FileManagerService.swift"}
      {"type": "struct", "name": "CodeFile", "file": "FileManagerService.swift"}
,
      {"type": "struct", "name": "EnhancedAnalysisItem", "file": "FileManagerService.swift"}
,
      {"type": "struct", "name": "FileAnalysisRecord", "file": "FileManagerService.swift"}
,
      {"type": "struct", "name": "Phase4EnhancedAnalysisResult", "file": "FileManagerService.swift"}
,
      {"type": "struct", "name": "Phase4AnalysisSummary", "file": "FileManagerService.swift"}
,
      {"type": "struct", "name": "ProjectStructure", "file": "FileManagerService.swift"}
,
      {"type": "struct", "name": "ProjectAnalysisResult", "file": "FileManagerService.swift"}
,
      {"type": "struct", "name": "ProjectInsight", "file": "FileManagerService.swift"}
,
      {"type": "struct", "name": "FileUploadResult", "file": "FileManagerService.swift"}
,
      {"type": "struct", "name": "SimpleLogger", "file": "FileManagerService.swift"}
      {"type": "enum", "name": "is", "file": "FileManagerService.swift"}
,
      {"type": "enum", "name": "CodeLanguage", "file": "FileManagerService.swift"}
,
      {"type": "enum", "name": "InsightType", "file": "FileManagerService.swift"}
,
      {"type": "enum", "name": "InsightSeverity", "file": "FileManagerService.swift"}
,
      {"type": "enum", "name": "FileManagerError", "file": "FileManagerService.swift"}
      {"type": "class", "name": "Item", "file": "Item.swift"}
      {"type": "struct", "name": "AISettingsView", "file": "AISettingsView.swift"}
      {"type": "enum", "name": "AIProvider", "file": "AISettingsView.swift"}
      {"type": "class", "name": "CodeReviewViewModel", "file": "CodeReviewViewModel.swift"}
,
      {"type": "class", "name": "DefaultCodeReviewService", "file": "CodeReviewViewModel.swift"}
      {"type": "struct", "name": "CodeAnalysisReport", "file": "CodeReviewViewModel.swift"}
,
      {"type": "struct", "name": "CodeMetrics", "file": "CodeReviewViewModel.swift"}
      {"type": "enum", "name": "Rating", "file": "CodeReviewViewModel.swift"}
      {"type": "class", "name": "EnhancedAICodeReviewService", "file": "AICodeReviewService.swift"}
      {"type": "struct", "name": "EnhancedAnalysisResult", "file": "AICodeReviewService.swift"}
,
      {"type": "struct", "name": "AIGeneratedFix", "file": "AICodeReviewService.swift"}
,
      {"type": "struct", "name": "AnalysisSummary", "file": "AICodeReviewService.swift"}
      {"type": "class", "name": "ComplexityAnalyzer", "file": "ComplexityAnalyzer.swift"}
      {"type": "struct", "name": "FunctionComplexity", "file": "ComplexityAnalyzer.swift"}
      {"type": "enum", "name": "ComplexityLevel", "file": "ComplexityAnalyzer.swift"}
      {"type": "struct", "name": "CodingReviewerApp", "file": "CodingReviewerApp.swift"}
      {"type": "class", "name": "QualityAnalyzer", "file": "CodeAnalyzers.swift"}
,
      {"type": "class", "name": "SecurityAnalyzer", "file": "CodeAnalyzers.swift"}
,
      {"type": "class", "name": "PerformanceAnalyzer", "file": "CodeAnalyzers.swift"}
      {"type": "struct", "name": "AnalysisResult", "file": "CodeAnalyzers.swift"}
      {"type": "enum", "name": "ResultType", "file": "CodeAnalyzers.swift"}
,
      {"type": "enum", "name": "Severity", "file": "CodeAnalyzers.swift"}
      {"type": "struct", "name": "AIInsightsView", "file": "ContentView_AI.swift"}
,
      {"type": "struct", "name": "AIStatusHeader", "file": "ContentView_AI.swift"}
,
      {"type": "struct", "name": "AIEmptyStateView", "file": "ContentView_AI.swift"}
,
      {"type": "struct", "name": "AnalysisHistoryList", "file": "ContentView_AI.swift"}
,
      {"type": "struct", "name": "AnalysisRecordRow", "file": "ContentView_AI.swift"}
,
      {"type": "struct", "name": "AIAnalysisDetailView", "file": "ContentView_AI.swift"}
,
      {"type": "struct", "name": "AISuggestionsSection", "file": "ContentView_AI.swift"}
,
      {"type": "struct", "name": "CodeQualityMetricsSection", "file": "ContentView_AI.swift"}
,
      {"type": "struct", "name": "MetricCard", "file": "ContentView_AI.swift"}
,
      {"type": "struct", "name": "AnalysisResultsSection", "file": "ContentView_AI.swift"}
,
      {"type": "struct", "name": "AnalysisResultCard", "file": "ContentView_AI.swift"}
,
      {"type": "struct", "name": "AISelectionPromptView", "file": "ContentView_AI.swift"}
,
      {"type": "struct", "name": "FixHistoryView", "file": "ContentView_AI.swift"}
,
      {"type": "struct", "name": "FixHistoryEntryView", "file": "ContentView_AI.swift"}
,
      {"type": "struct", "name": "AIUploadedFilesView", "file": "ContentView_AI.swift"}
      {"type": "enum", "name": "AIInsightsTab", "file": "ContentView_AI.swift"}
      {"type": "struct", "name": "AIAnalysisRequest", "file": "AIServiceProtocol.swift"}
,
      {"type": "struct", "name": "AnalysisContext", "file": "AIServiceProtocol.swift"}
,
      {"type": "struct", "name": "ComplexityScore", "file": "AIServiceProtocol.swift"}
,
      {"type": "struct", "name": "MaintainabilityScore", "file": "AIServiceProtocol.swift"}
,
      {"type": "struct", "name": "AIAnalysisResponse", "file": "AIServiceProtocol.swift"}
,
      {"type": "struct", "name": "AISuggestion", "file": "AIServiceProtocol.swift"}
,
      {"type": "struct", "name": "CodeFix", "file": "AIServiceProtocol.swift"}
,
      {"type": "struct", "name": "APIUsageStats", "file": "AIServiceProtocol.swift"}
      {"type": "enum", "name": "AnalysisType", "file": "AIServiceProtocol.swift"}
,
      {"type": "enum", "name": "ProjectType", "file": "AIServiceProtocol.swift"}
,
      {"type": "enum", "name": "Rating", "file": "AIServiceProtocol.swift"}
,
      {"type": "enum", "name": "Rating", "file": "AIServiceProtocol.swift"}
,
      {"type": "enum", "name": "SuggestionType", "file": "AIServiceProtocol.swift"}
,
      {"type": "enum", "name": "Severity", "file": "AIServiceProtocol.swift"}
,
      {"type": "enum", "name": "AIServiceError", "file": "AIServiceProtocol.swift"}
      {"type": "struct", "name": "APIKeySetupView", "file": "APIKeySetupView.swift"}
      {"type": "struct", "name": "EnhancedAIInsightsView", "file": "EnhancedAIInsightsView.swift"}
,
      {"type": "struct", "name": "AIMLHeaderView", "file": "EnhancedAIInsightsView.swift"}
,
      {"type": "struct", "name": "StatusIndicator", "file": "EnhancedAIInsightsView.swift"}
,
      {"type": "struct", "name": "MLInsightsView", "file": "EnhancedAIInsightsView.swift"}
,
      {"type": "struct", "name": "MLInsightCard", "file": "EnhancedAIInsightsView.swift"}
,
      {"type": "struct", "name": "PredictiveAnalysisView", "file": "EnhancedAIInsightsView.swift"}
,
      {"type": "struct", "name": "PredictionCard", "file": "EnhancedAIInsightsView.swift"}
,
      {"type": "struct", "name": "CrossProjectLearningView", "file": "EnhancedAIInsightsView.swift"}
,
      {"type": "struct", "name": "CrossProjectLearningCard", "file": "EnhancedAIInsightsView.swift"}
,
      {"type": "struct", "name": "RealtimeMLView", "file": "EnhancedAIInsightsView.swift"}
,
      {"type": "struct", "name": "StatusDot", "file": "EnhancedAIInsightsView.swift"}
,
      {"type": "struct", "name": "QuickStatCard", "file": "EnhancedAIInsightsView.swift"}
,
      {"type": "struct", "name": "EmptyMLStateView", "file": "EnhancedAIInsightsView.swift"}
,
      {"type": "struct", "name": "FullMLAnalysisView", "file": "EnhancedAIInsightsView.swift"}
,
      {"type": "struct", "name": "UploadedFilesDisplayView", "file": "EnhancedAIInsightsView.swift"}
      {"type": "enum", "name": "AIMLTab", "file": "EnhancedAIInsightsView.swift"}
      {"type": "class", "name": "AutomaticFixEngine", "file": "AutomaticFixEngine.swift"}
      {"type": "struct", "name": "DetectedIssue", "file": "AutomaticFixEngine.swift"}
,
      {"type": "struct", "name": "AutomaticFix", "file": "AutomaticFixEngine.swift"}
,
      {"type": "struct", "name": "FixApplicationResult", "file": "AutomaticFixEngine.swift"}
,
      {"type": "struct", "name": "FixFailure", "file": "AutomaticFixEngine.swift"}
      {"type": "enum", "name": "IssueType", "file": "AutomaticFixEngine.swift"}
,
      {"type": "enum", "name": "Severity", "file": "AutomaticFixEngine.swift"}
,
      {"type": "enum", "name": "FixType", "file": "AutomaticFixEngine.swift"}
,
      {"type": "enum", "name": "Confidence", "file": "AutomaticFixEngine.swift"}
,
      {"type": "enum", "name": "FixEngineError", "file": "AutomaticFixEngine.swift"}
      {"type": "class", "name": "MLIntegrationService", "file": "MLIntegrationService.swift"}
      {"type": "struct", "name": "MLInsight", "file": "MLIntegrationService.swift"}
,
      {"type": "struct", "name": "PredictiveAnalysis", "file": "MLIntegrationService.swift"}
,
      {"type": "struct", "name": "ProjectCompletion", "file": "MLIntegrationService.swift"}
,
      {"type": "struct", "name": "RiskAssessment", "file": "MLIntegrationService.swift"}
,
      {"type": "struct", "name": "PerformanceForecasting", "file": "MLIntegrationService.swift"}
,
      {"type": "struct", "name": "CrossProjectLearning", "file": "MLIntegrationService.swift"}
      {"type": "enum", "name": "InsightType", "file": "MLIntegrationService.swift"}
,
      {"type": "enum", "name": "Impact", "file": "MLIntegrationService.swift"}
      {"type": "class", "name": "SecurityManager", "file": "SecurityManager.swift"}
      {"type": "class", "name": "APIKeyManager", "file": "APIKeyManager.swift"}
      {"type": "struct", "name": "SecurityConfig", "file": "SecurityConfig.swift"}
      {"type": "struct", "name": "RefactoringSuggestion", "file": "AnalysisTypes.swift"}
      {"type": "enum", "name": "AnalysisEngine", "file": "AnalysisTypes.swift"}
,
      {"type": "enum", "name": "AnalysisScope", "file": "AnalysisTypes.swift"}
,
      {"type": "enum", "name": "AnalysisMode", "file": "AnalysisTypes.swift"}
,
      {"type": "enum", "name": "PatternType", "file": "AnalysisTypes.swift"}
,
      {"type": "enum", "name": "PatternConfidence", "file": "AnalysisTypes.swift"}
,
      {"type": "enum", "name": "QualityMetric", "file": "AnalysisTypes.swift"}
,
      {"type": "enum", "name": "ComplexityLevel", "file": "AnalysisTypes.swift"}
,
      {"type": "enum", "name": "DocumentationType", "file": "AnalysisTypes.swift"}
,
      {"type": "enum", "name": "DocumentationQuality", "file": "AnalysisTypes.swift"}
,
      {"type": "enum", "name": "SharedFixCategory", "file": "AnalysisTypes.swift"}
,
      {"type": "enum", "name": "FixStatus", "file": "AnalysisTypes.swift"}
,
      {"type": "enum", "name": "RefactoringType", "file": "AnalysisTypes.swift"}
,
      {"type": "enum", "name": "Impact", "file": "AnalysisTypes.swift"}
,
      {"type": "enum", "name": "Effort", "file": "AnalysisTypes.swift"}
      {"type": "enum", "name": "AIProvider", "file": "ServiceTypes.swift"}
,
      {"type": "enum", "name": "AnalysisType", "file": "ServiceTypes.swift"}
,
      {"type": "enum", "name": "SuggestionType", "file": "ServiceTypes.swift"}
,
      {"type": "enum", "name": "AnalysisResultType", "file": "ServiceTypes.swift"}
,
      {"type": "enum", "name": "ProjectType", "file": "ServiceTypes.swift"}
,
      {"type": "enum", "name": "FileUploadStatus", "file": "ServiceTypes.swift"}
,
      {"type": "enum", "name": "APIUsageStatus", "file": "ServiceTypes.swift"}
,
      {"type": "enum", "name": "RateLimitType", "file": "ServiceTypes.swift"}
      {"type": "enum", "name": "AppError", "file": "AppError.swift"}
      {"type": "enum", "name": "is", "file": "CodeTypes.swift"}
,
      {"type": "enum", "name": "Severity", "file": "CodeTypes.swift"}
,
      {"type": "enum", "name": "QualityLevel", "file": "CodeTypes.swift"}
,
      {"type": "enum", "name": "EffortLevel", "file": "CodeTypes.swift"}
,
      {"type": "enum", "name": "ImpactLevel", "file": "CodeTypes.swift"}
      {"type": "enum", "name": "definitions", "file": "SharedTypes.swift"}
,
      {"type": "enum", "name": "names", "file": "SharedTypes.swift"}
      {"type": "struct", "name": "EnhancedAnalysisRecordRow", "file": "EnhancedAnalysisRecordRow.swift"}
,
      {"type": "struct", "name": "EnhancedAnalysisRecordRow_Previews", "file": "EnhancedAnalysisRecordRow.swift"}
      {"type": "class", "name": "PerformanceTracker", "file": "PerformanceTracker.swift"}
      {"type": "struct", "name": "PerformanceMetric", "file": "PerformanceTracker.swift"}
      {"type": "struct", "name": "FixApplicationView", "file": "FixApplicationView.swift"}
,
      {"type": "struct", "name": "FixApplicationHeader", "file": "FixApplicationView.swift"}
,
      {"type": "struct", "name": "FixGenerationProgressView", "file": "FixApplicationView.swift"}
,
      {"type": "struct", "name": "EmptyFixesView", "file": "FixApplicationView.swift"}
,
      {"type": "struct", "name": "FixesList", "file": "FixApplicationView.swift"}
,
      {"type": "struct", "name": "FixRowView", "file": "FixApplicationView.swift"}
,
      {"type": "struct", "name": "ConfidenceBadge", "file": "FixApplicationView.swift"}
,
      {"type": "struct", "name": "ImpactIndicator", "file": "FixApplicationView.swift"}
,
      {"type": "struct", "name": "FixActionBar", "file": "FixApplicationView.swift"}
      {"type": "class", "name": "PatternRecognitionEngine", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "class", "name": "that", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "class", "name": "into", "file": "PatternRecognitionEngine.swift"}
      {"type": "struct", "name": "DetectedPattern", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "struct", "name": "CodeSmell", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "struct", "name": "CodeLocation", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "struct", "name": "ArchitectureInsights", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "struct", "name": "LayeringSuggestion", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "struct", "name": "CouplingAnalysis", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "struct", "name": "CohesionAnalysis", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "struct", "name": "DependencyGraph", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "struct", "name": "DependencyNode", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "struct", "name": "DependencyEdge", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "struct", "name": "ArchitectureRecommendation", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "struct", "name": "PerformanceIssue", "file": "PatternRecognitionEngine.swift"}
      {"type": "enum", "name": "CodeSmellType", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "enum", "name": "CodeSmellSeverity", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "enum", "name": "CodeSmellImpact", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "enum", "name": "LayerQuality", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "enum", "name": "CouplingLevel", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "enum", "name": "CohesionLevel", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "enum", "name": "NodeType", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "enum", "name": "EdgeType", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "enum", "name": "RecommendationType", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "enum", "name": "Priority", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "enum", "name": "Effort", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "enum", "name": "PerformanceIssueType", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "enum", "name": "PerformanceIssueSeverity", "file": "PatternRecognitionEngine.swift"}
,
      {"type": "enum", "name": "PerformanceImpact", "file": "PatternRecognitionEngine.swift"}
      {"type": "class", "name": "AppLogger", "file": "AppLogger.swift"}
      {"type": "enum", "name": "LogLevel", "file": "AppLogger.swift"}
,
      {"type": "enum", "name": "LogCategory", "file": "AppLogger.swift"}
,
      {"type": "enum", "name": "CodeReviewError", "file": "AppLogger.swift"}
      {"type": "class", "name": "IntelligentFixGenerator", "file": "IntelligentFixGenerator.swift"}
      {"type": "struct", "name": "IntelligentFix", "file": "IntelligentFixGenerator.swift"}
,
      {"type": "struct", "name": "CodeContext", "file": "IntelligentFixGenerator.swift"}
,
      {"type": "struct", "name": "FixValidation", "file": "IntelligentFixGenerator.swift"}
,
      {"type": "struct", "name": "CompilationCheck", "file": "IntelligentFixGenerator.swift"}
      {"type": "enum", "name": "FixCategory", "file": "IntelligentFixGenerator.swift"}
,
      {"type": "enum", "name": "FixImpact", "file": "IntelligentFixGenerator.swift"}
,
      {"type": "enum", "name": "FixRecommendation", "file": "IntelligentFixGenerator.swift"}
,
      {"type": "enum", "name": "FixApplicationError", "file": "IntelligentFixGenerator.swift"}
      {"type": "struct", "name": "ContentView", "file": "ContentView.swift"}
,
      {"type": "struct", "name": "AnalysisView", "file": "ContentView.swift"}
,
      {"type": "struct", "name": "AISuggestionRow", "file": "ContentView.swift"}
,
      {"type": "struct", "name": "ContentAnalysisResultsView", "file": "ContentView.swift"}
,
      {"type": "struct", "name": "AnalysisResultRow", "file": "ContentView.swift"}
,
      {"type": "struct", "name": "AIFixRow", "file": "ContentView.swift"}
,
      {"type": "struct", "name": "AINotEnabledView", "file": "ContentView.swift"}
,
      {"type": "struct", "name": "FeaturePreviewRow", "file": "ContentView.swift"}
,
      {"type": "struct", "name": "AIAnalysisResultView", "file": "ContentView.swift"}
,
      {"type": "struct", "name": "EmptyAIStateView", "file": "ContentView.swift"}
,
      {"type": "struct", "name": "SettingsView", "file": "ContentView.swift"}
,
      {"type": "struct", "name": "GeminiKeyInputView", "file": "ContentView.swift"}
,
      {"type": "struct", "name": "AIProviderPickerView", "file": "ContentView.swift"}
,
      {"type": "struct", "name": "LanguagePickerView", "file": "ContentView.swift"}
      {"type": "enum", "name": "Tab", "file": "ContentView.swift"}
      {"type": "class", "name": "ensures", "file": "SharedDataManager.swift"}
,
      {"type": "class", "name": "SharedDataManager", "file": "SharedDataManager.swift"}
      {"type": "struct", "name": "FileManagerKey", "file": "SharedDataManager.swift"}
      {"type": "class", "name": "FileUploadManager", "file": "FileUploadManager.swift"}
,
      {"type": "class", "name": "FileUploadLogger", "file": "FileUploadManager.swift"}
      {"type": "struct", "name": "FileUploadConfiguration", "file": "FileUploadManager.swift"}
,
      {"type": "struct", "name": "FileData", "file": "FileUploadManager.swift"}
,
      {"type": "struct", "name": "SimpleUploadResult", "file": "FileUploadManager.swift"}
      {"type": "enum", "name": "FileUploadError", "file": "FileUploadManager.swift"}
      {"type": "struct", "name": "FileUploadView", "file": "FileUploadView.swift"}
,
      {"type": "struct", "name": "ExportFileInfo", "file": "FileUploadView.swift"}
,
      {"type": "struct", "name": "StatisticItem", "file": "FileUploadView.swift"}
,
      {"type": "struct", "name": "SectionHeaderView", "file": "FileUploadView.swift"}
,
      {"type": "struct", "name": "FileRowView", "file": "FileUploadView.swift"}
,
      {"type": "struct", "name": "ProjectRowView", "file": "FileUploadView.swift"}
,
      {"type": "struct", "name": "FileDetailCard", "file": "FileUploadView.swift"}
,
      {"type": "struct", "name": "AnalysisResultsView", "file": "FileUploadView.swift"}
      {"type": "struct", "name": "DataFlowDiagnosticsView", "file": "DataFlowDiagnostics.swift"}
,
      {"type": "struct", "name": "DiagnosticResult", "file": "DataFlowDiagnostics.swift"}
,
      {"type": "struct", "name": "DiagnosticResultRow", "file": "DataFlowDiagnostics.swift"}
,
      {"type": "struct", "name": "DebugDataStateView", "file": "DataFlowDiagnostics.swift"}
      {"type": "enum", "name": "DiagnosticSeverity", "file": "DataFlowDiagnostics.swift"}

    ],
    "functions": [
      {
        "name": "generateDocumentation",
        "signature": "func generateDocumentation(for content: String, fileName: String) async -> GeneratedDocumentation",
        "file": "SmartDocumentationGenerator.swift"
      }
      {
        "name": "analyzeProject",
        "signature": "func analyzeProject(at projectPath: String) async throws -> String",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "analyzeFile",
        "signature": "func analyzeFile(at filePath: String) async throws -> [CodeIssue]",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "analyzeSwiftConcurrency",
        "signature": "private func analyzeSwiftConcurrency(lines: [String], filePath: String) -> [CodeIssue]",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "analyzeCodeQuality",
        "signature": "private func analyzeCodeQuality(lines: [String], filePath: String) -> [CodeIssue]",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "analyzePerformance",
        "signature": "private func analyzePerformance(lines: [String], filePath: String) -> [CodeIssue]",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "analyzeSecurity",
        "signature": "private func analyzeSecurity(lines: [String], filePath: String) -> [CodeIssue]",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "analyzeSwiftBestPractices",
        "signature": "private func analyzeSwiftBestPractices(lines: [String], filePath: String) -> [CodeIssue]",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "analyzeArchitecturalPatterns",
        "signature": "private func analyzeArchitecturalPatterns(lines: [String], filePath: String) -> [CodeIssue]",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "findSwiftFiles",
        "signature": "private func findSwiftFiles(in directory: String) throws -> [String]",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "generateRecommendations",
        "signature": "private func generateRecommendations(from issues: [CodeIssue]) -> [Recommendation]",
        "file": "IntelligentCodeAnalyzer.swift"
      }
      {
        "name": "analyzeCurrentCode",
        "signature": "private func analyzeCurrentCode() async",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "analyzeUploadedFiles",
        "signature": "private func analyzeUploadedFiles() async",
        "file": "PatternAnalysisView.swift"
      }
      {
        "name": "getContextualCode",
        "signature": "private func getContextualCode() -> String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "getModifiedContextualCode",
        "signature": "private func getModifiedContextualCode() -> String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "getContextRange",
        "signature": "private func getContextRange(for changeRange: ClosedRange<Int>, in lines: [String]) -> Range<Int>",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "recordAppliedFix",
        "signature": "func recordAppliedFix(_ fix: IntelligentFix, originalCode: String, modifiedCode: String, fileName: String)",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "saveHistory",
        "signature": "private func saveHistory()",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "loadHistory",
        "signature": "private func loadHistory()",
        "file": "DiffPreviewView.swift"
      }
      {
        "name": "mapSeverity",
        "signature": "private func mapSeverity(_ severity: String) -> AnalysisResult.Severity",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "hash",
        "signature": "func hash(into hasher: inout Hasher)",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "setupFileUploadBinding",
        "signature": "private func setupFileUploadBinding()",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "uploadFiles",
        "signature": "func uploadFiles(from urls: [URL]) async throws -> FileUploadResult",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "detectLanguage",
        "signature": "private func detectLanguage(from content: String, filename: String) -> CodeLanguage",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "detectLanguageByContentAdvanced",
        "signature": "private func detectLanguageByContentAdvanced(_ content: String) -> CodeLanguage?",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "detectLanguageBySimplePatterns",
        "signature": "private func detectLanguageBySimplePatterns(_ content: String) -> CodeLanguage?",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "detectLanguageByContent",
        "signature": "private func detectLanguageByContent(_ content: String) -> CodeLanguage?",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "analyzeFile",
        "signature": "func analyzeFile(_ file: CodeFile, withAI: Bool = false) async throws -> FileAnalysisRecord",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "performLanguageSpecificAnalysis",
        "signature": "private func performLanguageSpecificAnalysis(for file: CodeFile) async -> [EnhancedAnalysisItem]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "analyzeSwiftCode",
        "signature": "private func analyzeSwiftCode(_ content: String, lineCount: Int) -> [EnhancedAnalysisItem]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "analyzePythonCode",
        "signature": "private func analyzePythonCode(_ content: String, lineCount: Int) -> [EnhancedAnalysisItem]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "analyzeJavaScriptCode",
        "signature": "private func analyzeJavaScriptCode(_ content: String, lineCount: Int) -> [EnhancedAnalysisItem]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "analyzeJavaCode",
        "signature": "private func analyzeJavaCode(_ content: String, lineCount: Int) -> [EnhancedAnalysisItem]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "analyzeGenericCode",
        "signature": "private func analyzeGenericCode(_ content: String, lineCount: Int) -> [EnhancedAnalysisItem]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "analyzeMultipleFiles",
        "signature": "func analyzeMultipleFiles(_ files: [CodeFile], withAI: Bool = false) async throws -> [FileAnalysisRecord]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "performAIAnalysis",
        "signature": "func performAIAnalysis(for files: [CodeFile]) async",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "performSimpleAIAnalysis",
        "signature": "private func performSimpleAIAnalysis(code: String, language: CodeLanguage, fileName: String, provider: String, apiKey: String) async -> String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "callOpenAIAPI",
        "signature": "private func callOpenAIAPI(prompt: String, apiKey: String) async -> String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "callGeminiAPI",
        "signature": "private func callGeminiAPI(prompt: String, apiKey: String) async -> String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "generateIntelligentSuggestions",
        "signature": "private func generateIntelligentSuggestions(for file: CodeFile) async -> [String]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "generateSwiftSuggestions",
        "signature": "private func generateSwiftSuggestions(content: String) -> [String]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "generatePythonSuggestions",
        "signature": "private func generatePythonSuggestions(content: String) -> [String]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "generateJavaScriptSuggestions",
        "signature": "private func generateJavaScriptSuggestions(content: String) -> [String]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "generateJavaSuggestions",
        "signature": "private func generateJavaSuggestions(content: String) -> [String]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "generateGenericSuggestions",
        "signature": "private func generateGenericSuggestions(content: String) -> [String]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "analyzeProject",
        "signature": "func analyzeProject(_ project: ProjectStructure, withAI: Bool = false) async throws -> ProjectAnalysisResult",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "generateProjectInsights",
        "signature": "private func generateProjectInsights(from analyses: [FileAnalysisRecord], project: ProjectStructure) -> [ProjectInsight]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "searchFiles",
        "signature": "func searchFiles(query: String) -> [CodeFile]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "filterFilesByLanguage",
        "signature": "func filterFilesByLanguage(_ language: CodeLanguage) -> [CodeFile]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "filterFilesBySize",
        "signature": "func filterFilesBySize(minSize: Int = 0, maxSize: Int = Int.max) -> [CodeFile]",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "generateAnalysisReport",
        "signature": "func generateAnalysisReport(for analyses: [FileAnalysisRecord]) -> String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "removeFile",
        "signature": "func removeFile(_ file: CodeFile)",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "removeProject",
        "signature": "func removeProject(_ project: ProjectStructure)",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "clearAllFiles",
        "signature": "func clearAllFiles()",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "updateRecentFiles",
        "signature": "private func updateRecentFiles(with newFiles: [CodeFile])",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "savePersistedData",
        "signature": "private func savePersistedData()",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "loadPersistedData",
        "signature": "private func loadPersistedData()",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "log",
        "signature": "func log(_ message: String, file: String = #file, line: Int = #line)",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "log",
        "signature": "func log(_ message: String)",
        "file": "FileManagerService.swift"
      }
      {
        "name": "saveAPIKeys",
        "signature": "private func saveAPIKeys()",
        "file": "AISettingsView.swift"
      }
,
      {
        "name": "loadAPIKeys",
        "signature": "private func loadAPIKeys()",
        "file": "AISettingsView.swift"
      }
      {
        "name": "analyzeCode",
        "signature": "func analyzeCode(_ code: String) async -> CodeAnalysisReport",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "shouldAnalyze",
        "signature": "func shouldAnalyze() -> Bool",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "analyzeCode",
        "signature": "func analyzeCode() async",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "analyze",
        "signature": "public func analyze(_ code: String)",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "applyFix",
        "signature": "func applyFix(_ fix: CodeFix)",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "explainIssue",
        "signature": "func explainIssue(_ issue: AnalysisResult) async",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "extractCodeSnippet",
        "signature": "private func extractCodeSnippet(for issue: AnalysisResult) -> String",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "generateDocumentation",
        "signature": "func generateDocumentation() async",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "showAPIKeySetup",
        "signature": "func showAPIKeySetup()",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "clearResults",
        "signature": "public func clearResults()",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "setupAIService",
        "signature": "private func setupAIService()",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "observeKeyManager",
        "signature": "private func observeKeyManager()",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "updateAIStatus",
        "signature": "private func updateAIStatus(hasKey: Bool)",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "generateReportString",
        "signature": "private func generateReportString(from report: CodeAnalysisReport) -> String",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "analyzeCode",
        "signature": "func analyzeCode(_ code: String) async -> CodeAnalysisReport",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "calculateComplexity",
        "signature": "private func calculateComplexity(_ code: String) -> Int",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "determineRating",
        "signature": "private func determineRating(from results: [AnalysisResult]) -> CodeAnalysisReport.Rating",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "convertToEnhancedAnalysisItems",
        "signature": "private func convertToEnhancedAnalysisItems(_ results: [AnalysisResult]) -> [EnhancedAnalysisItem]",
        "file": "CodeReviewViewModel.swift"
      }
      {
        "name": "log",
        "signature": "private func log(_ message: String) async",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "performComprehensiveAnalysis",
        "signature": "func performComprehensiveAnalysis(",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "performIntelligentAnalysis",
        "signature": "private func performIntelligentAnalysis(content: String, fileName: String) -> EnhancedAnalysisResult",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "detectLanguageFromFileName",
        "signature": "private func detectLanguageFromFileName(_ fileName: String) -> String",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "generateIntelligentSuggestions",
        "signature": "private func generateIntelligentSuggestions(content: String, language: String) -> [String]",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "generateSwiftSuggestions",
        "signature": "private func generateSwiftSuggestions(content: String) -> [String]",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "generatePythonSuggestions",
        "signature": "private func generatePythonSuggestions(content: String) -> [String]",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "generateJavaScriptSuggestions",
        "signature": "private func generateJavaScriptSuggestions(content: String) -> [String]",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "generateJavaSuggestions",
        "signature": "private func generateJavaSuggestions(content: String) -> [String]",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "generateGenericSuggestions",
        "signature": "private func generateGenericSuggestions(content: String) -> [String]",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "calculateEnhancedComplexity",
        "signature": "private func calculateEnhancedComplexity(code: String) -> Double?",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "calculateEnhancedMaintainability",
        "signature": "private func calculateEnhancedMaintainability(code: String) -> Double?",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "generateNaturalLanguageExplanation",
        "signature": "private func generateNaturalLanguageExplanation(content: String, suggestions: [String]) -> String",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "generateAutomatedFixes",
        "signature": "private func generateAutomatedFixes(content: String, language: String) -> [String]",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "generateRefactoringSuggestions",
        "signature": "private func generateRefactoringSuggestions(content: String) -> [String]",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "generateSmartFixes",
        "signature": "private func generateSmartFixes(content: String, language: String) -> [AIGeneratedFix]",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "detectCommonIssues",
        "signature": "private func detectCommonIssues(content: String, language: String) -> [String]",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "createSmartFix",
        "signature": "private func createSmartFix(for issue: String, content: String, language: String) -> AIGeneratedFix?",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "determineSeverity",
        "signature": "private func determineSeverity(from message: String) -> String",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "generateFixesForIssues",
        "signature": "func generateFixesForIssues(_ issues: [String]) async throws -> [AIGeneratedFix]",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "analyzeCodeQuality",
        "signature": "func analyzeCodeQuality(_ code: String) async throws -> Double",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "explainCode",
        "signature": "func explainCode(_ code: String, language: String) async throws -> String",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "generateDocumentation",
        "signature": "func generateDocumentation(for code: String, language: String) async throws -> String",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "suggestRefactoring",
        "signature": "func suggestRefactoring(for code: String, language: String) async throws -> [String]",
        "file": "AICodeReviewService.swift"
      }
      {
        "name": "analyzeFunction",
        "signature": "func analyzeFunction(_ content: String, in file: String) -> FunctionComplexity",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "generateRefactoringSuggestions",
        "signature": "func generateRefactoringSuggestions(for complexity: FunctionComplexity) -> [RefactoringSuggestion]",
        "file": "ComplexityAnalyzer.swift"
      }
      {
        "name": "analyze",
        "signature": "func analyze(_ code: String) async -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "analyze",
        "signature": "func analyze(_ code: String) async -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "checkForceUnwrapping",
        "signature": "private func checkForceUnwrapping(in code: String) -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "checkLongLines",
        "signature": "private func checkLongLines(in lines: [String]) -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "checkTodoComments",
        "signature": "private func checkTodoComments(in code: String) -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "checkAccessControl",
        "signature": "private func checkAccessControl(in code: String) -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "checkErrorHandling",
        "signature": "private func checkErrorHandling(in code: String) -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "checkRetainCycles",
        "signature": "private func checkRetainCycles(in code: String) -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "findMatches",
        "signature": "private func findMatches(pattern: String, in string: String) -> [NSTextCheckingResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "analyze",
        "signature": "func analyze(_ code: String) async -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "checkSensitiveInformation",
        "signature": "private func checkSensitiveInformation(in code: String) -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "checkUnsafeNetwork",
        "signature": "private func checkUnsafeNetwork(in code: String) -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "checkSQLInjection",
        "signature": "private func checkSQLInjection(in code: String) -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "checkFileSystemAccess",
        "signature": "private func checkFileSystemAccess(in code: String) -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "analyze",
        "signature": "func analyze(_ code: String) async -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "checkMainThreadBlocking",
        "signature": "private func checkMainThreadBlocking(in code: String) -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "checkExpensiveOperations",
        "signature": "private func checkExpensiveOperations(in code: String) -> [AnalysisResult]",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "findMatches",
        "signature": "private func findMatches(pattern: String, in string: String) -> [NSTextCheckingResult]",
        "file": "CodeAnalyzers.swift"
      }
      {
        "name": "analyzeUploadedFiles",
        "signature": "private func analyzeUploadedFiles() async",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "createFallbackResult",
        "signature": "private func createFallbackResult(from record: FileAnalysisRecord) -> EnhancedAnalysisResult",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "createEnhancedResult",
        "signature": "private func createEnhancedResult(from record: FileAnalysisRecord) -> EnhancedAnalysisResult",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "formatDate",
        "signature": "private func formatDate(_ date: Date) -> String",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "complexityColor",
        "signature": "private func complexityColor(_ complexity: Double) -> Color",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "maintainabilityColor",
        "signature": "private func maintainabilityColor(_ maintainability: Double) -> Color",
        "file": "ContentView_AI.swift"
      }
      {
        "name": "analyzeCode",
        "signature": "func analyzeCode(_ request: AIAnalysisRequest) async throws -> AIAnalysisResponse",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "explainCode",
        "signature": "func explainCode(_ code: String, language: String) async throws -> String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "generateDocumentation",
        "signature": "func generateDocumentation(_ code: String, language: String) async throws -> String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "suggestRefactoring",
        "signature": "func suggestRefactoring(_ code: String, language: String) async throws -> [AISuggestion]",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "generateFix",
        "signature": "func generateFix(for issue: String) async throws -> String",
        "file": "AIServiceProtocol.swift"
      }
      {
        "name": "validateKey",
        "signature": "private func validateKey() async",
        "file": "APIKeySetupView.swift"
      }
,
      {
        "name": "saveKey",
        "signature": "private func saveKey() async",
        "file": "APIKeySetupView.swift"
      }
      {
        "name": "formatRelativeTime",
        "signature": "private func formatRelativeTime(_ date: Date) -> String",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "formatDate",
        "signature": "private func formatDate(_ date: Date) -> String",
        "file": "EnhancedAIInsightsView.swift"
      }
      {
        "name": "applyAutomaticFixes",
        "signature": "func applyAutomaticFixes(to filePath: String) async throws -> FixApplicationResult",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "detectIssues",
        "signature": "func detectIssues(in content: String, filePath: String) async throws -> [DetectedIssue]",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "generateFixes",
        "signature": "private func generateFixes(for issues: [DetectedIssue]) -> [AutomaticFix]",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "applyFixes",
        "signature": "private func applyFixes(_ fixes: [AutomaticFix], to content: String, filePath: String) async throws -> FixApplicationResult",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "applyFix",
        "signature": "private func applyFix(_ fix: AutomaticFix, to content: String) throws -> String",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "detectSwiftConcurrencyIssues",
        "signature": "private func detectSwiftConcurrencyIssues(line: String, lineNumber: Int) -> [DetectedIssue]",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "detectPerformanceIssues",
        "signature": "private func detectPerformanceIssues(line: String, lineNumber: Int) -> [DetectedIssue]",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "detectSecurityIssues",
        "signature": "private func detectSecurityIssues(line: String, lineNumber: Int) -> [DetectedIssue]",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "detectCodeQualityIssues",
        "signature": "private func detectCodeQualityIssues(line: String, lineNumber: Int) -> [DetectedIssue]",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "detectSwiftBestPractices",
        "signature": "private func detectSwiftBestPractices(line: String, lineNumber: Int) -> [DetectedIssue]",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "createConcurrencyFix",
        "signature": "private func createConcurrencyFix(for issue: DetectedIssue) -> AutomaticFix?",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "createUnusedVariableFix",
        "signature": "private func createUnusedVariableFix(for issue: DetectedIssue) -> AutomaticFix?",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "createSafeUnwrappingFix",
        "signature": "private func createSafeUnwrappingFix(for issue: DetectedIssue) -> AutomaticFix?",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "createStringInterpolationFix",
        "signature": "private func createStringInterpolationFix(for issue: DetectedIssue) -> AutomaticFix?",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "createWeakSelfFix",
        "signature": "private func createWeakSelfFix(for issue: DetectedIssue) -> AutomaticFix?",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "createOptionalChainingFix",
        "signature": "private func createOptionalChainingFix(for issue: DetectedIssue) -> AutomaticFix?",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "createImmutableVariableFix",
        "signature": "private func createImmutableVariableFix(for issue: DetectedIssue) -> AutomaticFix?",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "createRedundantReturnFix",
        "signature": "private func createRedundantReturnFix(for issue: DetectedIssue) -> AutomaticFix?",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "createMagicNumberFix",
        "signature": "private func createMagicNumberFix(for issue: DetectedIssue) -> AutomaticFix?",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "createFunctionRefactoringFix",
        "signature": "private func createFunctionRefactoringFix(for issue: DetectedIssue) -> AutomaticFix?",
        "file": "AutomaticFixEngine.swift"
      }
      {
        "name": "analyzeProjectWithML",
        "signature": "func analyzeProjectWithML(fileData: [CodeFile] = []) async",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "runMLPatternRecognition",
        "signature": "func runMLPatternRecognition(fileData: [CodeFile] = []) async",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "runPredictiveAnalytics",
        "signature": "func runPredictiveAnalytics(fileData: [CodeFile] = []) async",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "runAdvancedAIIntegration",
        "signature": "func runAdvancedAIIntegration(fileData: [CodeFile] = []) async",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "runPredictiveAnalytics",
        "signature": "private func runPredictiveAnalytics() async",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "runAdvancedAIIntegration",
        "signature": "private func runAdvancedAIIntegration() async",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "createTempFileList",
        "signature": "private func createTempFileList(_ fileData: [CodeFile]) async",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "runCrossProjectLearning",
        "signature": "private func runCrossProjectLearning() async",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "loadMLInsights",
        "signature": "private func loadMLInsights() async",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "loadPredictiveAnalysis",
        "signature": "private func loadPredictiveAnalysis() async",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "loadCrossProjectLearnings",
        "signature": "private func loadCrossProjectLearnings() async",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "parseMLRecommendations",
        "signature": "private func parseMLRecommendations(_ content: String) -> [MLInsight]",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "parsePredictiveAnalysis",
        "signature": "private func parsePredictiveAnalysis(_ htmlContent: String) -> PredictiveAnalysis",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "parseCrossProjectInsights",
        "signature": "private func parseCrossProjectInsights(_ content: String) -> [CrossProjectLearning]",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "extractMetric",
        "signature": "private func extractMetric(from text: String, pattern: String) -> Int?",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "getCurrentDateString",
        "signature": "private func getCurrentDateString() -> String",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "startPeriodicUpdates",
        "signature": "private func startPeriodicUpdates()",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "refreshMLData",
        "signature": "func refreshMLData() async",
        "file": "MLIntegrationService.swift"
      }
      {
        "name": "storeAPIKey",
        "signature": "static func storeAPIKey(_ key: String, for service: String) -> Bool",
        "file": "SecurityManager.swift"
      }
,
      {
        "name": "retrieveAPIKey",
        "signature": "func retrieveAPIKey(for service: String) -> String?",
        "file": "SecurityManager.swift"
      }
,
      {
        "name": "validateSecureURL",
        "signature": "func validateSecureURL(_ urlString: String) -> Bool",
        "file": "SecurityManager.swift"
      }
,
      {
        "name": "sanitizeInput",
        "signature": "func sanitizeInput(_ input: String) -> String",
        "file": "SecurityManager.swift"
      }
      {
        "name": "setUserDefaultsValue",
        "signature": "private func setUserDefaultsValue(_ value: String, key: String)",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "getUserDefaultsValue",
        "signature": "private func getUserDefaultsValue(key: String) -> String?",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "removeUserDefaultsValue",
        "signature": "private func removeUserDefaultsValue(key: String)",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "getOpenAIKey",
        "signature": "func getOpenAIKey() -> String?",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "setOpenAIKey",
        "signature": "func setOpenAIKey(_ key: String)",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "removeOpenAIKey",
        "signature": "func removeOpenAIKey()",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "validateOpenAIKey",
        "signature": "func validateOpenAIKey(_ key: String) async -> Bool",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "checkAPIKeyStatus",
        "signature": "func checkAPIKeyStatus()",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "getGeminiKey",
        "signature": "func getGeminiKey() -> String?",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "setGeminiKey",
        "signature": "func setGeminiKey(_ key: String)",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "removeGeminiKey",
        "signature": "func removeGeminiKey()",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "validateGeminiKey",
        "signature": "func validateGeminiKey(_ key: String) async -> Bool",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "showKeySetup",
        "signature": "func showKeySetup()",
        "file": "APIKeyManager.swift"
      }
      {
        "name": "validateEndpoint",
        "signature": "static func validateEndpoint(_ endpoint: String) -> Bool",
        "file": "SecurityConfig.swift"
      }
      {
        "name": "analysisItemView",
        "signature": "private func analysisItemView(item: EnhancedAnalysisItem, index: Int) -> some View",
        "file": "EnhancedAnalysisRecordRow.swift"
      }
,
      {
        "name": "severityColor",
        "signature": "private func severityColor(for severity: String) -> Color",
        "file": "EnhancedAnalysisRecordRow.swift"
      }
,
      {
        "name": "formatDuration",
        "signature": "private func formatDuration(_ duration: TimeInterval) -> String",
        "file": "EnhancedAnalysisRecordRow.swift"
      }
      {
        "name": "startTracking",
        "signature": "func startTracking(_ operation: String)",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "endTracking",
        "signature": "func endTracking(_ operation: String) -> TimeInterval?",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "getMetrics",
        "signature": "func getMetrics(for operation: String? = nil) -> [PerformanceMetric]",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "getAverageTime",
        "signature": "func getAverageTime(for operation: String) -> TimeInterval?",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "getSlowestOperations",
        "signature": "func getSlowestOperations(limit: Int = 10) -> [PerformanceMetric]",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "clearMetrics",
        "signature": "func clearMetrics()",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "getCurrentMemoryUsage",
        "signature": "private func getCurrentMemoryUsage() -> UInt64",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "generateReport",
        "signature": "func generateReport() -> String",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "measurePerformance",
        "signature": "func measurePerformance<T>(of operation: String, block: () throws -> T) rethrows -> T",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "measureAsyncPerformance",
        "signature": "func measureAsyncPerformance<T>(of operation: String, block: () async throws -> T) async rethrows -> T",
        "file": "PerformanceTracker.swift"
      }
      {
        "name": "generateFixes",
        "signature": "private func generateFixes() async",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "selectAllFixes",
        "signature": "private func selectAllFixes()",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "deselectAllFixes",
        "signature": "private func deselectAllFixes()",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "applySelectedFixes",
        "signature": "private func applySelectedFixes()",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "previewSelectedFixes",
        "signature": "private func previewSelectedFixes()",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "applyConfirmedFixes",
        "signature": "private func applyConfirmedFixes()",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "toggleFixSelection",
        "signature": "private func toggleFixSelection(_ fixId: UUID)",
        "file": "FixApplicationView.swift"
      }
      {
        "name": "detectDesignPatterns",
        "signature": "func detectDesignPatterns(",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "identifyCodeSmells",
        "signature": "func identifyCodeSmells(_ analysis: [AnalysisResult]) async -> [CodeSmell]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "analyzeArchitecture",
        "signature": "func analyzeArchitecture(files: [CodeFile]) async -> ArchitectureInsights",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectPerformanceBottlenecks",
        "signature": "func detectPerformanceBottlenecks(_ code: String) async -> [PerformanceIssue]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectSingletonPattern",
        "signature": "private func detectSingletonPattern(in code: String, language: CodeLanguage) async -> [DetectedPattern]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectObserverPattern",
        "signature": "private func detectObserverPattern(in code: String, language: CodeLanguage) async -> [DetectedPattern]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectFactoryPattern",
        "signature": "private func detectFactoryPattern(in code: String, language: CodeLanguage) async -> [DetectedPattern]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectMVVMPattern",
        "signature": "private func detectMVVMPattern(in code: String, language: CodeLanguage) async -> [DetectedPattern]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectDependencyInjectionPattern",
        "signature": "private func detectDependencyInjectionPattern(in code: String, language: CodeLanguage) async -> [DetectedPattern]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectLongMethodSmells",
        "signature": "private func detectLongMethodSmells(_ analysis: [AnalysisResult]) -> [CodeSmell]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectLargeClassSmells",
        "signature": "private func detectLargeClassSmells(_ analysis: [AnalysisResult]) -> [CodeSmell]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectDuplicateCodeSmells",
        "signature": "private func detectDuplicateCodeSmells(_ analysis: [AnalysisResult]) -> [CodeSmell]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectGodObjectSmells",
        "signature": "private func detectGodObjectSmells(_ analysis: [AnalysisResult]) -> [CodeSmell]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectDeadCodeSmells",
        "signature": "private func detectDeadCodeSmells(_ analysis: [AnalysisResult]) -> [CodeSmell]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "calculateArchitectureScore",
        "signature": "private func calculateArchitectureScore(_ files: [CodeFile]) -> Double",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "analyzeLayers",
        "signature": "private func analyzeLayers(_ files: [CodeFile]) -> [LayeringSuggestion]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "analyzeCoupling",
        "signature": "private func analyzeCoupling(_ files: [CodeFile]) -> CouplingAnalysis",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "analyzeCohesion",
        "signature": "private func analyzeCohesion(_ files: [CodeFile]) -> CohesionAnalysis",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "buildDependencyGraph",
        "signature": "private func buildDependencyGraph(_ files: [CodeFile]) -> DependencyGraph",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "generateArchitectureRecommendations",
        "signature": "private func generateArchitectureRecommendations(_ files: [CodeFile]) -> [ArchitectureRecommendation]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectInefficiientLoops",
        "signature": "private func detectInefficiientLoops(in code: String) -> [PerformanceIssue]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectMemoryLeaks",
        "signature": "private func detectMemoryLeaks(in code: String) -> [PerformanceIssue]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectUnnecessaryComputations",
        "signature": "private func detectUnnecessaryComputations(in code: String) -> [PerformanceIssue]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectIOBottlenecks",
        "signature": "private func detectIOBottlenecks(in code: String) -> [PerformanceIssue]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "detectAlgorithmicComplexity",
        "signature": "private func detectAlgorithmicComplexity(in code: String) -> [PerformanceIssue]",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "updateProgress",
        "signature": "private func updateProgress(_ progress: Double) async",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "findCodeLocation",
        "signature": "private func findCodeLocation(for pattern: String, in code: String) -> CodeLocation",
        "file": "PatternRecognitionEngine.swift"
      }
      {
        "name": "log",
        "signature": "func log(",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "startMeasurement",
        "signature": "func startMeasurement(for operation: String) -> Date",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "endMeasurement",
        "signature": "func endMeasurement(for operation: String, startTime: Date)",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "logAnalysisStart",
        "signature": "func logAnalysisStart(codeLength: Int)",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "logAnalysisComplete",
        "signature": "func logAnalysisComplete(resultsCount: Int, duration: TimeInterval)",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "logError",
        "signature": "func logError(_ error: Error, context: String, category: LogCategory = .general)",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "logAIRequest",
        "signature": "func logAIRequest(type: String, tokenCount: Int)",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "logAIResponse",
        "signature": "func logAIResponse(type: String, success: Bool, duration: TimeInterval)",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "debug",
        "signature": "func debug(_ message: String, file: String = #file, function: String = #function, line: Int = #line)",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "logWarning",
        "signature": "func logWarning(_ message: String, file: String = #file, function: String = #function, line: Int = #line)",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "logSecurity",
        "signature": "func logSecurity(_ message: String, file: String = #file, function: String = #function, line: Int = #line)",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "startMeasurement",
        "signature": "func startMeasurement(for operation: String) -> Date",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "endMeasurement",
        "signature": "func endMeasurement(for operation: String, startTime: Date)",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "getMetrics",
        "signature": "func getMetrics() -> [String: TimeInterval]",
        "file": "AppLogger.swift"
      }
      {
        "name": "generateFixes",
        "signature": "func generateFixes(",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "applyFix",
        "signature": "func applyFix(_ fix: IntelligentFix, to code: String) throws -> String",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "validateFix",
        "signature": "func validateFix(_ fix: IntelligentFix, in context: CodeContext) async -> FixValidation",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "generateSecurityFixes",
        "signature": "private func generateSecurityFixes(",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "generateForceUnwrappingFixes",
        "signature": "private func generateForceUnwrappingFixes(code: String, context: CodeContext) -> [IntelligentFix]",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "generatePerformanceFixes",
        "signature": "private func generatePerformanceFixes(",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "generateStringConcatenationFixes",
        "signature": "private func generateStringConcatenationFixes(code: String, context: CodeContext) -> [IntelligentFix]",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "generateStyleFixes",
        "signature": "private func generateStyleFixes(",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "generateLogicFixes",
        "signature": "private func generateLogicFixes(",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "updateProgress",
        "signature": "private func updateProgress(_ progress: Double) async",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "containsHardcodedCredentials",
        "signature": "private func containsHardcodedCredentials(_ code: String) -> Bool",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "generateStringBuilderFix",
        "signature": "private func generateStringBuilderFix(forLoop: String, concatenation: String) -> String",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "generateNamingFixes",
        "signature": "private func generateNamingFixes(code: String, context: CodeContext) -> [IntelligentFix]",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "generateFormattingFixes",
        "signature": "private func generateFormattingFixes(code: String, context: CodeContext) -> [IntelligentFix]",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "generateNullCheckFixes",
        "signature": "private func generateNullCheckFixes(code: String, context: CodeContext) -> [IntelligentFix]",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "generateExceptionHandlingFixes",
        "signature": "private func generateExceptionHandlingFixes(code: String, context: CodeContext) -> [IntelligentFix]",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "generateSQLInjectionFixes",
        "signature": "private func generateSQLInjectionFixes(code: String, context: CodeContext) -> [IntelligentFix]",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "generateCredentialFixes",
        "signature": "private func generateCredentialFixes(code: String, context: CodeContext) -> [IntelligentFix]",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "generateCollectionOptimizationFixes",
        "signature": "private func generateCollectionOptimizationFixes(code: String, context: CodeContext) -> [IntelligentFix]",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "performCompilationCheck",
        "signature": "private func performCompilationCheck(fix: IntelligentFix, context: CodeContext) async -> CompilationCheck",
        "file": "IntelligentFixGenerator.swift"
      }
      {
        "name": "validateKey",
        "signature": "private func validateKey() async",
        "file": "ContentView.swift"
      }
,
      {
        "name": "saveKey",
        "signature": "private func saveKey()",
        "file": "ContentView.swift"
      }
      {
        "name": "getFileManager",
        "signature": "func getFileManager() -> FileManagerService",
        "file": "SharedDataManager.swift"
      }
,
      {
        "name": "refreshAllViews",
        "signature": "func refreshAllViews()",
        "file": "SharedDataManager.swift"
      }
      {
        "name": "uploadFiles",
        "signature": "func uploadFiles(from urls: [URL]) async throws -> SimpleUploadResult",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "uploadSingleFile",
        "signature": "private func uploadSingleFile(from url: URL) async throws -> FileData",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "uploadDirectory",
        "signature": "private func uploadDirectory(at url: URL) async throws -> SimpleUploadResult",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "validateFile",
        "signature": "private func validateFile(at url: URL) async throws",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "readFileContent",
        "signature": "private func readFileContent(from url: URL) throws -> String",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "getSupportedFileTypes",
        "signature": "func getSupportedFileTypes() -> Set<String>",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "getMaxFileSize",
        "signature": "func getMaxFileSize() -> Int",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "validateFileTypeSupported",
        "signature": "func validateFileTypeSupported(extension fileExtension: String) -> Bool",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "log",
        "signature": "func log(_ message: String, file: String = #file, line: Int = #line) async",
        "file": "FileUploadManager.swift"
      }
      {
        "name": "handleFileImport",
        "signature": "private func handleFileImport(_ result: Result<[URL], Error>)",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "showFolderPicker",
        "signature": "private func showFolderPicker()",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "handleDrop",
        "signature": "private func handleDrop(providers: [NSItemProvider]) -> Bool",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "toggleFileSelection",
        "signature": "private func toggleFileSelection(_ file: CodeFile)",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "selectProjectFiles",
        "signature": "private func selectProjectFiles(_ project: ProjectStructure)",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "analyzeSelectedFiles",
        "signature": "private func analyzeSelectedFiles()",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "analyzeAllFiles",
        "signature": "private func analyzeAllFiles()",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "exportFileList",
        "signature": "private func exportFileList()",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "uploadResultMessage",
        "signature": "private func uploadResultMessage(_ result: FileUploadResult) -> String",
        "file": "FileUploadView.swift"
      }
      {
        "name": "runDiagnostics",
        "signature": "private func runDiagnostics()",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "performDiagnostics",
        "signature": "private func performDiagnostics() async",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "testSharedDataManagerSingleton",
        "signature": "private func testSharedDataManagerSingleton() async -> DiagnosticResult",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "testFileManagerConsistency",
        "signature": "private func testFileManagerConsistency() async -> DiagnosticResult",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "testUploadedFilesAccess",
        "signature": "private func testUploadedFilesAccess() async -> DiagnosticResult",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "testCrossViewDataSharing",
        "signature": "private func testCrossViewDataSharing() async -> DiagnosticResult",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "testAIInsightsViewState",
        "signature": "private func testAIInsightsViewState() async -> DiagnosticResult",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "testPatternAnalysisViewState",
        "signature": "private func testPatternAnalysisViewState() async -> DiagnosticResult",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "addDiagnosticsTab",
        "signature": "func addDiagnosticsTab() -> some View",
        "file": "DataFlowDiagnostics.swift"
      }

    ],
    "types": [
      {"type": "typealias", "name": "OldEnumName", "file": "SharedTypes.swift"}

    ],
    "properties": [
      {
        "name": "let id = UUID()",
        "type": "",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let overview: String",
        "type": "String",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let sections: [DocumentationSection]",
        "type": "",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let generatedAt: Date",
        "type": "Date",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let id = UUID()",
        "type": "",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let content: String",
        "type": "String",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let type: DocumentationType",
        "type": "DocumentationType",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let id = UUID()",
        "type": "",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let type: SuggestionType",
        "type": "SuggestionType",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let message: String",
        "type": "String",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let priority: Priority",
        "type": "Priority",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let location: String?",
        "type": "String",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "@Published var isGenerating = false",
        "type": "",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "@Published var generationProgress: Double = 0.0",
        "type": "Double",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "@Published var generatedDocumentation: GeneratedDocumentation?",
        "type": "GeneratedDocumentation",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "@Published var documentationSuggestions: [DocumentationSuggestion] = []",
        "type": "",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let overview = "Documentation for \(fileName)"",
        "type": "",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let sections = [",
        "type": "",
        "file": "SmartDocumentationGenerator.swift"
      }
,
      {
        "name": "let documentation = GeneratedDocumentation(",
        "type": "",
        "file": "SmartDocumentationGenerator.swift"
      }
      {
        "name": "static let shared = IntelligentCodeAnalyzer()",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "private let logger = OSLog(subsystem: "CodingReviewer", category: "CodeAnalyzer")",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let startTime = Date()",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let swiftFiles = try findSwiftFiles(in: projectPath)",
        "type": "projectPath",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "var totalIssues = 0",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let fileIssues = try await analyzeFile(at: filePath)",
        "type": "filePath",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let duration = Date().timeIntervalSince(startTime)",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let result = "Analyzed \(swiftFiles.count) files, found \(totalIssues) issues in \(String(format: "%.2f", duration)) seconds"",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let content = try String(contentsOfFile: filePath, encoding: .utf8)",
        "type": "filePath",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let lines = content.components(separatedBy: .newlines)",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "var issues: [CodeIssue] = []",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "var issues: [CodeIssue] = []",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let lineNumber = index + 1",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "var issues: [CodeIssue] = []",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let lineNumber = index + 1",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let trimmedLine = line.trimmingCharacters(in: .whitespaces)",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "// Check for unused variables (let _ pattern)",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "if let range = trimmedLine.range(of: #"let\s+([a-zA-Z_]\w*)\s*="#, options: .regularExpression) {",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let variableName = String(trimmedLine[range]).replacingOccurrences(of: "let ", with: "").replacingOccurrences(of: " =", with: "")",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let remainingLines = Array(lines[(index + 1)...])",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let isUsed = remainingLines.joined().contains(variableName)",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "suggestedFix: trimmedLine.replacingOccurrences(of: "let \(variableName)", with: "let _"),",
        "type": "trimmedLine",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "// Check for var that should be let",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "// Simple heuristic: if var is declared but never reassigned",
        "type": "if",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "var issues: [CodeIssue] = []",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let lineNumber = index + 1",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let forceUnwrapPattern = #"[a-zA-Z_]\w*!"#",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "var issues: [CodeIssue] = []",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let lineNumber = index + 1",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let secretPatterns = ["apikey", "secret", "password", "token"]",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "var issues: [CodeIssue] = []",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let lineNumber = index + 1",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let magicNumberPattern = #"\b([2-9]|[1-9][0-9]+)\b"#",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "var issues: [CodeIssue] = []",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "var currentFunctionStart: Int?",
        "type": "Int",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "var braceCount = 0",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let lineNumber = index + 1",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "} else if let _ = currentFunctionStart {",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let functionLength = lineNumber - (currentFunctionStart ?? 0)",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let fileManager = FileManager.default",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let enumerator = fileManager.enumerator(atPath: directory)",
        "type": "directory",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "var swiftFiles: [String] = []",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "while let file = enumerator?.nextObject() as? String {",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "var recommendations: [Recommendation] = []",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let issuesByCategory = Dictionary(grouping: issues) { $0.category }",
        "type": "issues",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let count = categoryIssues.count",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let autoFixable = categoryIssues.filter { $0.isAutoFixable }.count",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let type: IssueType",
        "type": "IssueType",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let severity: Severity",
        "type": "Severity",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let filePath: String",
        "type": "String",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let lineNumber: Int",
        "type": "Int",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let message: String",
        "type": "String",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let originalCode: String",
        "type": "String",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let suggestedFix: String",
        "type": "String",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let isAutoFixable: Bool",
        "type": "Bool",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let category: Category",
        "type": "Category",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let category: CodeIssue.Category",
        "type": "CodeIssue",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let priority: Priority",
        "type": "Priority",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "let action: String",
        "type": "String",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "var errorDescription: String? {",
        "type": "String",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "case .fileNotFound(let path):",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
,
      {
        "name": "case .invalidSwiftFile(let path):",
        "type": "",
        "file": "IntelligentCodeAnalyzer.swift"
      }
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@StateObject private var patternEngine = PatternRecognitionEngine()",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@ObservedObject var viewModel: CodeReviewViewModel",
        "type": "CodeReviewViewModel",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@EnvironmentObject var fileManager: FileManagerService",
        "type": "FileManagerService",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var selectedTab: PatternTab = .patterns",
        "type": "PatternTab",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var isAnalyzing = false",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "let combinedContent = fileManager.uploadedFiles.map { file in",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "let patterns: [DetectedPattern]",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "let smells: [CodeSmell]",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "let issues: [PerformanceIssue]",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "let pattern: DetectedPattern",
        "type": "DetectedPattern",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var isExpanded = false",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "if let suggestion = pattern.suggestion {",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "let smell: CodeSmell",
        "type": "CodeSmell",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "let issue: PerformanceIssue",
        "type": "PerformanceIssue",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "let icon: String",
        "type": "String",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "let files: [CodeFile]",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "let languageGroups = Dictionary(grouping: files, by: { $0.language })",
        "type": "files",
        "file": "PatternAnalysisView.swift"
      }
,
      {
        "name": "let sortedLanguages = languageGroups.keys.sorted(by: { $0.displayName < $1.displayName })",
        "type": "",
        "file": "PatternAnalysisView.swift"
      }
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let fix: IntelligentFix",
        "type": "IntelligentFix",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let originalCode: String",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "@Environment(\.dismiss) private var dismiss",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "@State private var showingApplyConfirmation = false",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let lines = originalCode.components(separatedBy: .newlines)",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let contextRange = getContextRange(for: fix.startLine...fix.endLine, in: lines)",
        "type": "fix
lines",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let lines = originalCode.components(separatedBy: .newlines)",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "var modifiedLines = lines",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let lineRange = fix.startLine...min(fix.endLine, lines.count - 1)",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let fixedLines = fix.fixedCode.components(separatedBy: .newlines)",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let contextRange = getContextRange(for: fix.startLine...fix.endLine, in: lines)",
        "type": "fix
lines",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let adjustedRange = contextRange.lowerBound..<min(contextRange.upperBound, modifiedLines.count)",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let contextLines = 3",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let start = max(0, changeRange.lowerBound - contextLines)",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let end = min(lines.count, changeRange.upperBound + contextLines + 1)",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let fix: IntelligentFix",
        "type": "IntelligentFix",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let originalCode: String",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let modifiedCode: String",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let changedLineRange: ClosedRange<Int>",
        "type": "ClosedRange",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let color: Color",
        "type": "Color",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let code: String",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let highlightType: DiffHighlightType",
        "type": "DiffHighlightType",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let changedLineRange: ClosedRange<Int>",
        "type": "ClosedRange",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let lineNumber: Int",
        "type": "Int",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let content: String",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let isChanged: Bool",
        "type": "Bool",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let highlightType: DiffHighlightType",
        "type": "DiffHighlightType",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "var backgroundColor: Color {",
        "type": "Color",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "var borderColor: Color {",
        "type": "Color",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "var textColor: Color {",
        "type": "Color",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let id = UUID()",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let fixId: UUID",
        "type": "UUID",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let appliedAt: Date",
        "type": "Date",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let originalCode: String",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let modifiedCode: String",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let fileName: String",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "var formattedDate: String {",
        "type": "String",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let formatter = DateFormatter()",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "@Published var history: [FixHistoryEntry] = []",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let entry = FixHistoryEntry(",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "if let encoded = try? JSONEncoder().encode(history) {",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "if let data = UserDefaults.standard.data(forKey: "FixHistory"),",
        "type": "",
        "file": "DiffPreviewView.swift"
      }
,
      {
        "name": "let decoded = try? JSONDecoder().decode([FixHistoryEntry].self, from: data) {",
        "type": "data",
        "file": "DiffPreviewView.swift"
      }
      {
        "name": "var displayName: String {",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var iconName: String {",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let id: UUID",
        "type": "UUID",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let name: String",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let path: String",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let content: String",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let language: CodeLanguage",
        "type": "CodeLanguage",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let size: Int",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let lastModified: Date",
        "type": "Date",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let checksum: String",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var displaySize: String {",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var fileExtension: String {",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let message: String",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let severity: String",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let lineNumber: Int?",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let type: String",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let id: UUID",
        "type": "UUID",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let file: CodeFile",
        "type": "CodeFile",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let analysisResults: [EnhancedAnalysisItem] // Rich analysis data",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let aiAnalysisResult: String? // AI explanation",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let timestamp: Date",
        "type": "Date",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let duration: TimeInterval",
        "type": "TimeInterval",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let fileName: String",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let fileSize: Int",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let language: String",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let originalResults: [String]",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let aiSuggestions: [String]",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let complexity: Double?",
        "type": "Double",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let maintainability: Double?",
        "type": "Double",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let fixes: [String]",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let summary: Phase4AnalysisSummary",
        "type": "Phase4AnalysisSummary",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let totalSuggestions: Int",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let criticalIssues: Int",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let errors: Int",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let warnings: Int",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let infos: Int",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let complexityScore: Int",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let maintainabilityScore: Double",
        "type": "Double",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var fileName: String { file.name }",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var originalCode: String? { file.content }",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var language: String? { file.language.rawValue }",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var results: [AnalysisResult] {",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var enhancedResult: Phase4EnhancedAnalysisResult? {",
        "type": "Phase4EnhancedAnalysisResult",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "guard let aiResult = aiAnalysisResult else { return nil }",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var hasAIAnalysis: Bool { aiAnalysisResult != nil }",
        "type": "Bool",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let id: UUID",
        "type": "UUID",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let name: String",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let rootPath: String",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let files: [CodeFile]",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let folders: [String]",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let totalSize: Int",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let fileCount: Int",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let languageDistribution: [String: Int] // Simplified for Codable compliance",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let createdAt: Date",
        "type": "Date",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var displaySize: String {",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let project: ProjectStructure",
        "type": "ProjectStructure",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let fileAnalyses: [FileAnalysisRecord]",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let insights: [ProjectInsight]",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let duration: TimeInterval",
        "type": "TimeInterval",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var totalIssues: Int {",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var averageIssuesPerFile: Double {",
        "type": "Double",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let type: InsightType",
        "type": "InsightType",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let message: String",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let severity: InsightSeverity",
        "type": "InsightSeverity",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let fileCount: Int",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var icon: String {",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var color: String {",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let successfulFiles: [CodeFile]",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let failedFiles: [(String, Error)]",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let warnings: [String]",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var hasErrors: Bool {",
        "type": "Bool",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var hasWarnings: Bool {",
        "type": "Bool",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "@Published var uploadedFiles: [CodeFile] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "@Published var analysisHistory: [FileAnalysisRecord] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "@Published var projects: [ProjectStructure] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "@Published var isUploading: Bool = false",
        "type": "Bool",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "@Published var uploadProgress: Double = 0.0",
        "type": "Double",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "@Published var errorMessage: String?",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "@Published var recentFiles: [CodeFile] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "@Published var isAIAnalyzing = false",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "@Published var aiInsightsAvailable = false",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "@Published var showingAIInsights = false",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "@Published var lastAIAnalysis: String?",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "private let logger = FileManagerLogger()",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "private let fileUploadManager = FileUploadManager()",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "// private let fileAnalysisService = FileAnalysisService()",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "// private let languageDetectionService = LanguageDetectionService()",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let uploadResult = try await fileUploadManager.uploadFiles(from: urls)",
        "type": "urls",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var successfulFiles: [CodeFile] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let language = detectLanguage(from: fileData.content, filename: fileData.name)",
        "type": "fileData
fileData",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let codeFile = CodeFile(",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let newFiles = successfulFiles.filter { newFile in",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let result = FileUploadResult(",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let fileExtension = URL(fileURLWithPath: filename).pathExtension.lowercased()",
        "type": "filename",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let lines = content.components(separatedBy: .newlines).prefix(20)",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let contentPrefix = lines.joined(separator: "\n").lowercased()",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var scores: [CodeLanguage: Int] = [:]",
        "type": "Int",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let contentLower = content.lowercased()",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let startTime = Date()",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let analysisResults = await performLanguageSpecificAnalysis(for: file)",
        "type": "file",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let aiAnalysisResult: String?",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let duration = Date().timeIntervalSince(startTime)",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let record = FileAnalysisRecord(",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var results: [EnhancedAnalysisItem] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let lineCount = file.content.components(separatedBy: .newlines).count",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let characterCount = file.content.count",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var results: [EnhancedAnalysisItem] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let forceUnwrapCount = content.components(separatedBy: "!").count - 1",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let functionPattern = "func .+?\\{[\\s\\S]*?^\\}"",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "if let regex = try? NSRegularExpression(pattern: functionPattern, options: [.anchorsMatchLines]) {",
        "type": "functionPattern",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let matches = regex.matches(in: content, options: [], range: NSRange(content.startIndex..., in: content))",
        "type": "content
NSRange
content",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "if let range = Range(match.range, in: content) {",
        "type": "content",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let functionCode = String(content[range])",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let functionLineCount = functionCode.components(separatedBy: .newlines).count",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var results: [EnhancedAnalysisItem] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let printCount = content.components(separatedBy: "await AppLogger.shared.log(").count - 1",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var results: [EnhancedAnalysisItem] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let consoleLogCount = content.components(separatedBy: "console.log").count - 1",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "// Check for var usage (prefer let/const)",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var results: [EnhancedAnalysisItem] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let printCount = content.components(separatedBy: "System.out.println").count - 1",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var results: [EnhancedAnalysisItem] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let averageLineLength = content.count / max(lineCount, 1)",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var results: [FileAnalysisRecord] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let record = try await analyzeFile(file, withAI: withAI)",
        "type": "withAI",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let selectedProvider = UserDefaults.standard.string(forKey: "selectedAIProvider") ?? "openai"",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let apiKey: String?",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "guard let validApiKey = apiKey, !validApiKey.isEmpty else {",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let providerName = selectedProvider == "gemini" ? "Google Gemini" : "OpenAI"",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var allInsights: [String] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let analysis = await performSimpleAIAnalysis(",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let fileInsight = "**\(file.name)** (\(file.language.displayName)):\n\(analysis)"",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let prompt = "Analyze this \(language.displayName) code file '\(fileName)' and provide helpful suggestions for improvement:\n\n\(code)"",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "guard let url = URL(string: "https://api.openai.com/v1/chat/completions") else {",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var request = URLRequest(url: url)",
        "type": "url",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let requestBody: [String: Any] = [",
        "type": "Any",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "if let httpResponse = response as? HTTPURLResponse {",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {",
        "type": "data
Any",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "if let error = json["error"] as? [String: Any],",
        "type": "Any",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let message = error["message"] as? String {",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "if let choices = json["choices"] as? [[String: Any]],",
        "type": "Any",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let firstChoice = choices.first,",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let message = firstChoice["message"] as? [String: Any],",
        "type": "Any",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let content = message["content"] as? String {",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let errorMessage = error.localizedDescription",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "guard let url = URL(string: "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=\(apiKey)") else {",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var request = URLRequest(url: url)",
        "type": "url",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let requestBody: [String: Any] = [",
        "type": "Any",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "if let httpResponse = response as? HTTPURLResponse {",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {",
        "type": "data
Any",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "if let error = json["error"] as? [String: Any],",
        "type": "Any",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let message = error["message"] as? String {",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "if let candidates = json["candidates"] as? [[String: Any]],",
        "type": "Any",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let firstCandidate = candidates.first,",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let content = firstCandidate["content"] as? [String: Any],",
        "type": "Any",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let parts = content["parts"] as? [[String: Any]],",
        "type": "Any",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let firstPart = parts.first,",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let text = firstPart["text"] as? String {",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let errorMessage = error.localizedDescription",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var suggestions: [String] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var suggestions: [String] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var suggestions: [String] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var suggestions: [String] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var suggestions: [String] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var suggestions: [String] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let lines = content.components(separatedBy: CharacterSet.newlines)",
        "type": "CharacterSet",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let startTime = Date()",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var allAnalysisResults: [FileAnalysisRecord] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let record = try await analyzeFile(file, withAI: withAI)",
        "type": "withAI",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let projectInsights = generateProjectInsights(from: allAnalysisResults, project: project)",
        "type": "allAnalysisResults
project",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let duration = Date().timeIntervalSince(startTime)",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let result = ProjectAnalysisResult(",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var insights: [ProjectInsight] = []",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let languageStats = project.files.reduce(into: [:]) { counts, file in",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let largFiles = project.files.filter { $0.size > 10000 } // 10KB+",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let allIssues = analyses.flatMap { $0.analysisResults }",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let totalIssues = allIssues.count",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let highSeverityIssues = allIssues.filter { issue in",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let testFiles = project.files.filter { $0.name.lowercased().contains("test") }",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let testCoverage = Double(testFiles.count) / Double(project.files.count) * 100",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let lowercaseQuery = query.lowercased()",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var report = "# Code Analysis Report\n\n"",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let allIssues = analyses.flatMap { $0.analysisResults }",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let totalIssues = allIssues.count",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let fileCount = analyses.count",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let avgIssuesPerFile = fileCount > 0 ? Double(totalIssues) / Double(fileCount) : 0",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let issuesBySeverity = allIssues.reduce(into: [:]) { counts, item in",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let projectFileIds = Set(project.files.map(\.id))",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var errorDescription: String? {",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "case .accessDenied(let filename):",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "case .fileTooLarge(let filename, let size, let maxSize):",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let sizeStr = ByteCountFormatter.string(fromByteCount: Int64(size), countStyle: .file)",
        "type": "Int64",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let maxSizeStr = ByteCountFormatter.string(fromByteCount: Int64(maxSize), countStyle: .file)",
        "type": "Int64",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "case .unsupportedFileType(let type):",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "case .fileNotReadable(let filename):",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "case .notARegularFile(let filename):",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "case .directoryEnumerationFailed(let path):",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "case .encodingError(let filename):",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "case .networkError(let error):",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "var sha256: String {",
        "type": "String",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let hash = SHA256.hash(data: self)",
        "type": "self",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let fileName = (file as NSString).lastPathComponent",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let timestamp = DateFormatter.logFormatter.string(from: Date())",
        "type": "Date",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "static let logFormatter: DateFormatter = {",
        "type": "DateFormatter",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let formatter = DateFormatter()",
        "type": "",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "static let reportFormatter: DateFormatter = {",
        "type": "DateFormatter",
        "file": "FileManagerService.swift"
      }
,
      {
        "name": "let formatter = DateFormatter()",
        "type": "",
        "file": "FileManagerService.swift"
      }
      {
        "name": "var timestamp: Date",
        "type": "Date",
        "file": "Item.swift"
      }
      {
        "name": "@State private var openAIKey = """,
        "type": "",
        "file": "AISettingsView.swift"
      }
,
      {
        "name": "@State private var geminiKey = """,
        "type": "",
        "file": "AISettingsView.swift"
      }
,
      {
        "name": "@State private var selectedProvider: AIProvider = .openai",
        "type": "AIProvider",
        "file": "AISettingsView.swift"
      }
,
      {
        "name": "@State private var showAlert = false",
        "type": "",
        "file": "AISettingsView.swift"
      }
,
      {
        "name": "@State private var alertMessage = """,
        "type": "",
        "file": "AISettingsView.swift"
      }
,
      {
        "name": "var displayName: String { rawValue }",
        "type": "String",
        "file": "AISettingsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "AISettingsView.swift"
      }
,
      {
        "name": "if let provider = UserDefaults.standard.string(forKey: "selected_provider"),",
        "type": "",
        "file": "AISettingsView.swift"
      }
,
      {
        "name": "let aiProvider = AIProvider(rawValue: provider) {",
        "type": "provider",
        "file": "AISettingsView.swift"
      }
      {
        "name": "private var lastAnalysisTime: Date = .distantPast",
        "type": "Date",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "private let debounceInterval: TimeInterval = 0.5",
        "type": "TimeInterval",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let now = Date()",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let timeSinceLastAnalysis = now.timeIntervalSince(lastAnalysisTime)",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let results: [AnalysisResult]",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let metrics: CodeMetrics",
        "type": "CodeMetrics",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let overallRating: Rating",
        "type": "Rating",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "var description: String {",
        "type": "String",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let characterCount: Int",
        "type": "Int",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let lineCount: Int",
        "type": "Int",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let estimatedComplexity: Int",
        "type": "Int",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let analysisTime: TimeInterval",
        "type": "TimeInterval",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "@Published var codeInput: String = """,
        "type": "String",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "@Published var analysisResults: [AnalysisResult] = []",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "@Published var aiAnalysisResult: AIAnalysisResponse?",
        "type": "AIAnalysisResponse",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "@Published var aiSuggestions: [AISuggestion] = []",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "@Published var availableFixes: [CodeFix] = []",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "@Published var isAnalyzing: Bool = false",
        "type": "Bool",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "@Published var isAIAnalyzing: Bool = false",
        "type": "Bool",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "@Published var errorMessage: String?",
        "type": "String",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "@Published var showingResults: Bool = false",
        "type": "Bool",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "@Published var selectedLanguage: CodeLanguage = .swift",
        "type": "CodeLanguage",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "@Published var aiEnabled: Bool = false",
        "type": "Bool",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "@Published var analysisReport: CodeAnalysisReport?",
        "type": "CodeAnalysisReport",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "@Published var analysisResult: String = """,
        "type": "String",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "private let codeReviewService: CodeReviewService",
        "type": "CodeReviewService",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "private var aiService: EnhancedAICodeReviewService?",
        "type": "EnhancedAICodeReviewService",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "private let keyManager: APIKeyManager",
        "type": "APIKeyManager",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "private var cancellables = Set<AnyCancellable>()",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "private let debouncer = AnalysisDebouncer()",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "private let logger = AppLogger.shared",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "private let osLogger = Logger(subsystem: "com.DanielStevens.CodingReviewer", category: "CodeReviewViewModel")",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let startTime = Date()",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let report = await codeReviewService.analyzeCode(codeInput)",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "if aiEnabled, let aiService = aiService {",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let qualityScore = try await aiService.analyzeCodeQuality(codeInput)",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let basicSuggestion = AISuggestion(",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let criticalIssues = analysisResults.filter { $0.severity == .critical || $0.severity == .high }",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let issueMessages = criticalIssues.map { $0.message }",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let fixes = try await aiService.generateFixesForIssues(issueMessages)",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let duration = Date().timeIntervalSince(startTime)",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "guard let aiService = aiService else { return }",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let codeSnippet = extractCodeSnippet(for: issue)",
        "type": "issue",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "if let line = issue.line {",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let lines = codeInput.components(separatedBy: .newlines)",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let startLine = max(0, line - 3)",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let endLine = min(lines.count - 1, line + 3)",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "guard let aiService = aiService, !codeInput.isEmpty else { return }",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "guard let apiKey = keyManager.getOpenAIKey() else {",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "var reportString = "📊 Code Analysis Report\n"",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let qualityResults = report.results.filter { $0.type == .quality }",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let securityResults = report.results.filter { $0.type == .security }",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let suggestionResults = report.results.filter { $0.type == .suggestion }",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let performanceResults = report.results.filter { $0.type == .performance }",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "if let aiResult = aiAnalysisResult {",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "if let complexity = aiResult.complexity {",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "if let maintainability = aiResult.maintainability {",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "if let documentation = aiResult.documentation, !documentation.isEmpty {",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "private let analyzers: [CodeAnalyzer] = [",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let startTime = CFAbsoluteTimeGetCurrent()",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "var allResults: [AnalysisResult] = []",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let endTime = CFAbsoluteTimeGetCurrent()",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let analysisTime = endTime - startTime",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let metrics = CodeMetrics(",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let rating = determineRating(from: allResults)",
        "type": "allResults",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let complexityKeywords = ["if", "else", "for", "while", "switch", "case", "catch", "&&", "||"]",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "var complexity = 1 // Base complexity",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let criticalCount = results.filter { $0.severity == .critical }.count",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let highCount = results.filter { $0.severity == .high }.count",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let mediumCount = results.filter { $0.severity == .medium }.count",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
,
      {
        "name": "let totalIssues = criticalCount + highCount + mediumCount",
        "type": "",
        "file": "CodeReviewViewModel.swift"
      }
      {
        "name": "@Published var isAnalyzing = false",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "@Published var analysisProgress: Double = 0.0",
        "type": "Double",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "@Published var aiInsightsAvailable = false",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "@Published var lastAnalysisTimestamp: Date?",
        "type": "Date",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var results: [EnhancedAnalysisResult] = []",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let totalFiles = fileContents.count",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let progress = Double(index) / Double(totalFiles)",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let fileName = index < fileNames.count ? fileNames[index] : "file_\(index)"",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let result = performIntelligentAnalysis(content: content, fileName: fileName)",
        "type": "content
fileName",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let language = detectLanguageFromFileName(fileName)",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let aiSuggestions = generateIntelligentSuggestions(content: content, language: language)",
        "type": "content
language",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let complexity = calculateEnhancedComplexity(code: content)",
        "type": "content",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let maintainability = calculateEnhancedMaintainability(code: content)",
        "type": "content",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let fixes = generateSmartFixes(content: content, language: language)",
        "type": "content
language",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let ext = (fileName as NSString).pathExtension.lowercased()",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var suggestions: [String] = []",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var suggestions: [String] = []",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var suggestions: [String] = []",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var suggestions: [String] = []",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var suggestions: [String] = []",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var suggestions: [String] = []",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let lines = content.components(separatedBy: CharacterSet.newlines)",
        "type": "CharacterSet",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let lines = code.components(separatedBy: CharacterSet.newlines)",
        "type": "CharacterSet",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let nonEmptyLines = lines.filter { !$0.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty }",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var complexity = Double(nonEmptyLines.count) / 50.0",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let conditionals = (code.components(separatedBy: " if ").count - 1) +",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let openBraces = code.components(separatedBy: "{").count - 1",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let closeBraces = code.components(separatedBy: "}").count - 1",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let nesting = min(openBraces, closeBraces)",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let lines = code.components(separatedBy: CharacterSet.newlines)",
        "type": "CharacterSet",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let nonEmptyLines = lines.filter { !$0.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty }",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let avgLineLength = nonEmptyLines.map { $0.count }.reduce(0, +) / max(nonEmptyLines.count, 1)",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var maintainability = 100.0 - (Double(avgLineLength) / 2.0)",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let functionCount = (code.components(separatedBy: "func ").count - 1) +",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let lines = content.components(separatedBy: CharacterSet.newlines)",
        "type": "CharacterSet",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let wordCount = content.components(separatedBy: CharacterSet.whitespacesAndNewlines).filter { !$0.isEmpty }.count",
        "type": "CharacterSet",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var explanation = "📋 **Code Analysis Summary:**\n\n"",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var fixes: [String] = []",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var suggestions: [String] = []",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let lines = content.components(separatedBy: CharacterSet.newlines)",
        "type": "CharacterSet",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var currentFunctionLines = 0",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var inFunction = false",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let trimmedLine = line.trimmingCharacters(in: .whitespaces)",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let codeBlocks = lines.filter { !$0.trimmingCharacters(in: .whitespaces).isEmpty }",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let duplicateThreshold = 3",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let pattern = Array(codeBlocks[i..<(i + duplicateThreshold)])",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let patternString = pattern.joined(separator: "\n")",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var occurrences = 0",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let checkPattern = Array(codeBlocks[j..<(j + duplicateThreshold)])",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let checkString = checkPattern.joined(separator: "\n")",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var fixes: [AIGeneratedFix] = []",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let issues = detectCommonIssues(content: content, language: language)",
        "type": "content
language",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "if let fix = createSmartFix(for: issue, content: content, language: language) {",
        "type": "issue
content
language",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "var issues: [String] = []",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let lines = code.components(separatedBy: CharacterSet.newlines)",
        "type": "CharacterSet",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let nonEmptyLines = lines.filter { !$0.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty }",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let avgLineLength = nonEmptyLines.map { $0.count }.reduce(0, +) / max(nonEmptyLines.count, 1)",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let fileName: String",
        "type": "String",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let fileSize: Int",
        "type": "Int",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let language: String",
        "type": "String",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let originalResults: [String]",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let aiSuggestions: [String]",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let complexity: Double?",
        "type": "Double",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let maintainability: Double?",
        "type": "Double",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let fixes: [String]",
        "type": "",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let summary: AnalysisSummary",
        "type": "AnalysisSummary",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let id: UUID",
        "type": "UUID",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let originalIssue: String",
        "type": "String",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let fix: String",
        "type": "String",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let confidence: Double",
        "type": "Double",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let isAutoApplicable: Bool",
        "type": "Bool",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let totalSuggestions: Int",
        "type": "Int",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let criticalIssues: Int",
        "type": "Int",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let errors: Int",
        "type": "Int",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let warnings: Int",
        "type": "Int",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let infos: Int",
        "type": "Int",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let complexityScore: Int",
        "type": "Int",
        "file": "AICodeReviewService.swift"
      }
,
      {
        "name": "let maintainabilityScore: Double",
        "type": "Double",
        "file": "AICodeReviewService.swift"
      }
      {
        "name": "static let shared = ComplexityAnalyzer()",
        "type": "",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "let lines = content.components(separatedBy: .newlines)",
        "type": "",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "var cyclomaticComplexity = 1 // Base complexity",
        "type": "",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "var cognitiveComplexity = 0",
        "type": "",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "var nestingLevel = 0",
        "type": "",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "var maxNesting = 0",
        "type": "",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "let trimmedLine = line.trimmingCharacters(in: .whitespaces)",
        "type": "",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "var suggestions: [RefactoringSuggestion] = []",
        "type": "",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "let cyclomaticComplexity: Int",
        "type": "Int",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "let cognitiveComplexity: Int",
        "type": "Int",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "let maxNestingLevel: Int",
        "type": "Int",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "let linesOfCode: Int",
        "type": "Int",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "var overallComplexity: ComplexityLevel {",
        "type": "ComplexityLevel",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "let score = cyclomaticComplexity + cognitiveComplexity + maxNestingLevel",
        "type": "",
        "file": "ComplexityAnalyzer.swift"
      }
,
      {
        "name": "var description: String {",
        "type": "String",
        "file": "ComplexityAnalyzer.swift"
      }
      {
        "name": "var body: some Scene {",
        "type": "some",
        "file": "CodingReviewerApp.swift"
      }
      {
        "name": "let type: ResultType",
        "type": "ResultType",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let message: String",
        "type": "String",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let line: Int?",
        "type": "Int",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let severity: Severity",
        "type": "Severity",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "var rawValue: String {",
        "type": "String",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "var rawValue: String {",
        "type": "String",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "var results: [AnalysisResult] = []",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let lines = code.components(separatedBy: .newlines)",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let forceUnwrapPattern = "\\w+!"",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let matches = findMatches(pattern: forceUnwrapPattern, in: code)",
        "type": "forceUnwrapPattern
code",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let longLines = lines.enumerated().filter { $0.element.count > 120 }",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let todoCount = findMatches(pattern: "(?i)(TODO|FIXME|HACK)", in: code).count",
        "type": "code",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let publicDeclarations = findMatches(pattern: "public (class|struct|func|var|let)", in: code).count",
        "type": "code",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let privateDeclarations = findMatches(pattern: "private (class|struct|func|var|let)", in: code).count",
        "type": "code",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let hasTry = code.contains("try") && !code.contains("catch") && !code.contains("try?") && !code.contains("try!")",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let hasSelfInEscaping = code.contains("self.") && code.contains("@escaping")",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let regex = try NSRegularExpression(pattern: pattern, options: [])",
        "type": "pattern",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let range = NSRange(location: 0, length: string.utf16.count)",
        "type": "string",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "var results: [AnalysisResult] = []",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let sensitivePatterns = ["password", "secret", "token", "key", "credential"]",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "var results: [AnalysisResult] = []",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let hasSQL = code.contains("SQL") || code.contains("sqlite")",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let hasFileAccess = code.contains("FileManager") || code.contains("Bundle.main")",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "var results: [AnalysisResult] = []",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let blockingPatterns = ["Thread.sleep", "sleep(", "usleep"]",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "var results: [AnalysisResult] = []",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let expensivePatterns = ["for.*in.*{", "while.*{"]",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "var results: [AnalysisResult] = []",
        "type": "",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let regex = try NSRegularExpression(pattern: pattern, options: [])",
        "type": "pattern",
        "file": "CodeAnalyzers.swift"
      }
,
      {
        "name": "let range = NSRange(location: 0, length: string.utf16.count)",
        "type": "string",
        "file": "CodeAnalyzers.swift"
      }
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "@EnvironmentObject var fileManager: FileManagerService",
        "type": "FileManagerService",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "@StateObject private var fixGenerator = IntelligentFixGenerator()",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "@StateObject private var fixHistory = FixHistoryManager()",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "@StateObject private var patternEngine = PatternRecognitionEngine()",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "@State private var selectedAnalysisRecord: FileAnalysisRecord?",
        "type": "FileAnalysisRecord",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "@State private var showingFixApplication = false",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "@State private var showingFixHistory = false",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "@State private var showingPatternAnalysis = false",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "@State private var currentModifiedCode: String = """,
        "type": "String",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "@State private var selectedTab: AIInsightsTab = .analysis",
        "type": "AIInsightsTab",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "if let record = selectedAnalysisRecord {",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "if let record = selectedAnalysisRecord {",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "if let fix = fixGenerator.generatedFixes.first {",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let analysisCount: Int",
        "type": "Int",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let fixesAvailable: Int",
        "type": "Int",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let onShowHistory: () -> Void",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let records: [FileAnalysisRecord]",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "@Binding var selectedRecord: FileAnalysisRecord?",
        "type": "FileAnalysisRecord",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let record: FileAnalysisRecord",
        "type": "FileAnalysisRecord",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "if let language = record.language {",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let formatter = RelativeDateTimeFormatter()",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let record: FileAnalysisRecord",
        "type": "FileAnalysisRecord",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let onGenerateFixes: (FileAnalysisRecord) -> Void",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "if let language = record.language {",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "if let enhancedResult = record.enhancedResult,",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "// if let enhancedResult = record.enhancedResult {",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let suggestions: [String]",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let result: EnhancedAnalysisResult",
        "type": "EnhancedAnalysisResult",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let value: String",
        "type": "String",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let color: Color",
        "type": "Color",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let results: [AnalysisResult]",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let result: AnalysisResult",
        "type": "AnalysisResult",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "if let line = result.line {",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "@ObservedObject var historyManager: FixHistoryManager",
        "type": "FixHistoryManager",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "@Environment(\.dismiss) private var dismiss",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let entry: FixHistoryEntry",
        "type": "FixHistoryEntry",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var color: Color {",
        "type": "Color",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let uploadedFiles: [CodeFile]",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let onAnalyzeFiles: () -> Void",
        "type": "",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let languageGroups = Dictionary(grouping: uploadedFiles, by: { $0.language })",
        "type": "uploadedFiles",
        "file": "ContentView_AI.swift"
      }
,
      {
        "name": "let sortedLanguages = Array(Set(uploadedFiles.map { $0.language })).sorted(by: { $0.displayName < $1.displayName })",
        "type": "",
        "file": "ContentView_AI.swift"
      }
      {
        "name": "let code: String",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let language: CodeLanguage",
        "type": "CodeLanguage",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let analysisType: AnalysisType",
        "type": "AnalysisType",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let context: AnalysisContext?",
        "type": "AnalysisContext",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let fileName: String?",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let projectType: ProjectType?",
        "type": "ProjectType",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let dependencies: [String]?",
        "type": "",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let targetFramework: String?",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let score: Double // 0.0 to 1.0",
        "type": "Double",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let cyclomaticComplexity: Double",
        "type": "Double",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let score: Double // 0.0 to 1.0",
        "type": "Double",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let suggestions: [AISuggestion]",
        "type": "",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let fixes: [CodeFix]",
        "type": "",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let documentation: String?",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let complexity: ComplexityScore?",
        "type": "ComplexityScore",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let maintainability: MaintainabilityScore?",
        "type": "MaintainabilityScore",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let executionTime: TimeInterval",
        "type": "TimeInterval",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let id: UUID",
        "type": "UUID",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let type: SuggestionType",
        "type": "SuggestionType",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let severity: Severity",
        "type": "Severity",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let lineNumber: Int?",
        "type": "Int",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let columnNumber: Int?",
        "type": "Int",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let confidence: Double // 0.0 to 1.0",
        "type": "Double",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "var color: String {",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let id: UUID",
        "type": "UUID",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let suggestionId: UUID",
        "type": "UUID",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let originalCode: String",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let fixedCode: String",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let explanation: String",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let confidence: Double",
        "type": "Double",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let isAutoApplicable: Bool",
        "type": "Bool",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "var errorDescription: String? {",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "case .networkError(let error):",
        "type": "",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "var aiPromptName: String {",
        "type": "String",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let tokensUsed: Int",
        "type": "Int",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let requestsCount: Int",
        "type": "Int",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let totalCost: Double",
        "type": "Double",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let lastResetDate: Date",
        "type": "Date",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let dailyLimit: Int",
        "type": "Int",
        "file": "AIServiceProtocol.swift"
      }
,
      {
        "name": "let monthlyLimit: Int",
        "type": "Int",
        "file": "AIServiceProtocol.swift"
      }
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "APIKeySetupView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "APIKeySetupView.swift"
      }
,
      {
        "name": "@State private var tempKey = """,
        "type": "",
        "file": "APIKeySetupView.swift"
      }
,
      {
        "name": "@State private var isValidating = false",
        "type": "",
        "file": "APIKeySetupView.swift"
      }
,
      {
        "name": "@State private var validationResult: String?",
        "type": "String",
        "file": "APIKeySetupView.swift"
      }
,
      {
        "name": "@State private var selectedProvider = "OpenAI"",
        "type": "",
        "file": "APIKeySetupView.swift"
      }
,
      {
        "name": "@Environment(\.dismiss) private var dismiss",
        "type": "",
        "file": "APIKeySetupView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "APIKeySetupView.swift"
      }
,
      {
        "name": "if let result = validationResult {",
        "type": "",
        "file": "APIKeySetupView.swift"
      }
,
      {
        "name": "let isValid: Bool",
        "type": "Bool",
        "file": "APIKeySetupView.swift"
      }
      {
        "name": "@StateObject private var mlService = MLIntegrationService()",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@EnvironmentObject private var fileManager: FileManagerService",
        "type": "FileManagerService",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@State private var selectedTab: AIMLTab = .insights",
        "type": "AIMLTab",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@State private var showingFullAnalysis = false",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@ObservedObject var mlService: MLIntegrationService",
        "type": "MLIntegrationService",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@ObservedObject var fileManager: FileManagerService",
        "type": "FileManagerService",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let onRunAnalysis: () -> Void",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let onShowFullAnalysis: () -> Void",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "if let lastUpdate = mlService.lastUpdate {",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let formatter = RelativeDateTimeFormatter()",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let count: Int",
        "type": "Int",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let color: Color",
        "type": "Color",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@ObservedObject var mlService: MLIntegrationService",
        "type": "MLIntegrationService",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@ObservedObject var fileManager: FileManagerService",
        "type": "FileManagerService",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let insight: MLInsight",
        "type": "MLInsight",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@State private var isExpanded = false",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@ObservedObject var mlService: MLIntegrationService",
        "type": "MLIntegrationService",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "if let prediction = mlService.predictiveData {",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let formatter = DateFormatter()",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let icon: String",
        "type": "String",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let color: Color",
        "type": "Color",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let content: Content",
        "type": "Content",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@ObservedObject var mlService: MLIntegrationService",
        "type": "MLIntegrationService",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let learning: CrossProjectLearning",
        "type": "CrossProjectLearning",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@State private var isExpanded = false",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@ObservedObject var mlService: MLIntegrationService",
        "type": "MLIntegrationService",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@State private var timer: Timer?",
        "type": "Timer",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let color: Color",
        "type": "Color",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let label: String",
        "type": "String",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let value: String",
        "type": "String",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let icon: String",
        "type": "String",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let color: Color",
        "type": "Color",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let icon: String",
        "type": "String",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let action: () -> Void",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@ObservedObject var mlService: MLIntegrationService",
        "type": "MLIntegrationService",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "@Environment(\.dismiss) private var dismiss",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let files: [CodeFile]",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let languageGroups = Dictionary(grouping: files, by: { $0.language })",
        "type": "files",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let sortedLanguages = Array(Set(files.map { $0.language })).sorted(by: { $0.displayName < $1.displayName })",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
,
      {
        "name": "let count = languageGroups[language]?.count ?? 0",
        "type": "",
        "file": "EnhancedAIInsightsView.swift"
      }
      {
        "name": "static let shared = AutomaticFixEngine()",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "private let logger = OSLog(subsystem: "CodingReviewer", category: "AutomaticFixEngine")",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let content = try String(contentsOfFile: filePath, encoding: .utf8)",
        "type": "filePath",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let issues = try await detectIssues(in: content, filePath: filePath)",
        "type": "content
filePath",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let fixes = generateFixes(for: issues)",
        "type": "issues",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let result = try await applyFixes(fixes, to: content, filePath: filePath)",
        "type": "content
filePath",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "var issues: [DetectedIssue] = []",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let lines = content.components(separatedBy: .newlines)",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let lineNumber = index + 1",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "var modifiedContent = content",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "var appliedFixes: [AutomaticFix] = []",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "var failedFixes: [FixFailure] = []",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let sortedFixes = fixes.sorted { $0.lineNumber > $1.lineNumber }",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let failure = FixFailure(fix: fix, error: error)",
        "type": "fix
error",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "var lines = content.components(separatedBy: .newlines)",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let lineIndex = fix.lineNumber - 1",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let originalLine = lines[lineIndex]",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "case .replace(let pattern, let replacement):",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let newLine = originalLine.replacingOccurrences(of: pattern, with: replacement)",
        "type": "pattern
replacement",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "case .insert(let newLine):",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "case .multiLineReplace(let startLine, let endLine, let newLines):",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let startIndex = startLine - 1",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let endIndex = min(endLine - 1, lines.count - 1)",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "var issues: [DetectedIssue] = []",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "var issues: [DetectedIssue] = []",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "var issues: [DetectedIssue] = []",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let pattern = #"[a-zA-Z_][a-zA-Z0-9_]*!"#",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "var issues: [DetectedIssue] = []",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "description: "Variable should be declared as let instead of var",",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "var issues: [DetectedIssue] = []",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let magicNumberPattern = #"\b([2-9]|[1-9][0-9]+)\b"#",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let pattern = #"([a-zA-Z_][a-zA-Z0-9_]*\.shared\.[a-zA-Z_][a-zA-Z0-9_]*\()"#",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let replacement = "await $1"",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let pattern = #"let ([a-zA-Z_][a-zA-Z0-9_]*) ="#",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let replacement = "let _ ="",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let pattern = #"([a-zA-Z_][a-zA-Z0-9_]*)!"#",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let replacement = "$1 ?? defaultValue"",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let pattern = #"print\("([^"]+)"\)"#",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let replacement = #"logger.logInfo("$1")"#",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let pattern = #"{ self\."#",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let replacement = "{ [weak self] in self?."",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let pattern = #"if let ([a-zA-Z_][a-zA-Z0-9_]*) = ([a-zA-Z_][a-zA-Z0-9_]*) {"#",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let replacement = "$2?."",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let pattern = #"var ([a-zA-Z_][a-zA-Z0-9_]*)"#",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let replacement = "let $1"",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "description: "Change var to let for immutable variable",",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let pattern = #"return (.+)"#",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let replacement = "$1"",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let type: IssueType",
        "type": "IssueType",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let lineNumber: Int",
        "type": "Int",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let originalCode: String",
        "type": "String",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let severity: Severity",
        "type": "Severity",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let type: DetectedIssue.IssueType",
        "type": "DetectedIssue",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let fixType: FixType",
        "type": "FixType",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let lineNumber: Int",
        "type": "Int",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let confidence: Confidence",
        "type": "Confidence",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let appliedFixes: [AutomaticFix]",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let failedFixes: [FixFailure]",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let modifiedContent: String",
        "type": "String",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "var successRate: Double {",
        "type": "Double",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let total = appliedFixes.count + failedFixes.count",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let fix: AutomaticFix",
        "type": "AutomaticFix",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "let error: Error",
        "type": "Error",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "var errorDescription: String? {",
        "type": "String",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "case .invalidLineNumber(let line):",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "case .patternNotFound(let pattern):",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "case .fileNotWritable(let path):",
        "type": "",
        "file": "AutomaticFixEngine.swift"
      }
,
      {
        "name": "var trimmed: String {",
        "type": "String",
        "file": "AutomaticFixEngine.swift"
      }
      {
        "name": "@Published var isAnalyzing = false",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "@Published var mlInsights: [MLInsight] = []",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "@Published var predictiveData: PredictiveAnalysis?",
        "type": "PredictiveAnalysis",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "@Published var crossProjectLearnings: [CrossProjectLearning] = []",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "@Published var analysisProgress: Double = 0.0",
        "type": "Double",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "@Published var lastUpdate: Date?",
        "type": "Date",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "private let logger = AppLogger.shared",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "private var cancellables = Set<AnyCancellable>()",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let task = Process()",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let task = Process()",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let task = Process()",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let task = Process()",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let task = Process()",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let tempDir = FileManager.default.temporaryDirectory",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let fileListURL = tempDir.appendingPathComponent("uploaded_files.json")",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let fileInfo = fileData.map { file in",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let jsonData = try JSONSerialization.data(withJSONObject: fileInfo, options: .prettyPrinted)",
        "type": "fileInfo",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let task = Process()",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let mlDataPath = ".ml_automation/recommendations_\(getCurrentDateString()).md"",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "if let content = try? String(contentsOfFile: mlDataPath) {",
        "type": "mlDataPath",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let insights = parseMLRecommendations(content)",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let dashboardPath = ".predictive_analytics/dashboard_\(getCurrentDateString()).html"",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "if let htmlContent = try? String(contentsOfFile: dashboardPath) {",
        "type": "dashboardPath",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let analysis = parsePredictiveAnalysis(htmlContent)",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let insightsPath = ".cross_project_learning/insights/cross_patterns_\(getCurrentDateString()).md"",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "if let content = try? String(contentsOfFile: insightsPath) {",
        "type": "insightsPath",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let learnings = parseCrossProjectInsights(content)",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "var insights: [MLInsight] = []",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let completionConfidence = extractMetric(from: htmlContent, pattern: "confidence.*?(\\d+)%") ?? 78",
        "type": "htmlContent",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let riskScore = extractMetric(from: htmlContent, pattern: "risk.*?(\\d+)%") ?? 15",
        "type": "htmlContent",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "var learnings: [CrossProjectLearning] = []",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let regex = try? NSRegularExpression(pattern: pattern, options: .caseInsensitive)",
        "type": "pattern",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let range = NSRange(text.startIndex..., in: text)",
        "type": "text",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "if let match = regex?.firstMatch(in: text, options: [], range: range),",
        "type": "text
range",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let matchRange = Range(match.range(at: 1), in: text) {",
        "type": "text",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let formatter = DateFormatter()",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let id = UUID()",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let type: InsightType",
        "type": "InsightType",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let confidence: Double",
        "type": "Double",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let recommendation: String",
        "type": "String",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let impact: Impact",
        "type": "Impact",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "var icon: String {",
        "type": "String",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "var color: Color {",
        "type": "Color",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "var description: String {",
        "type": "String",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let projectCompletion: ProjectCompletion",
        "type": "ProjectCompletion",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let riskAssessment: RiskAssessment",
        "type": "RiskAssessment",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let performanceForecasting: PerformanceForecasting",
        "type": "PerformanceForecasting",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let estimatedDate: Date",
        "type": "Date",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let confidence: Double",
        "type": "Double",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let remainingWork: String",
        "type": "String",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let overallRisk: Double",
        "type": "Double",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let criticalRisks: [String]",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let mitigation: String",
        "type": "String",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let buildTimeIncrease: Double",
        "type": "Double",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let memoryUsageGrowth: Double",
        "type": "Double",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let recommendations: [String]",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let id = UUID()",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let pattern: String",
        "type": "String",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let transferability: Double",
        "type": "Double",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let successRate: Double",
        "type": "Double",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let implementations: [String]",
        "type": "",
        "file": "MLIntegrationService.swift"
      }
,
      {
        "name": "let benefits: String",
        "type": "String",
        "file": "MLIntegrationService.swift"
      }
      {
        "name": "static let shared = SecurityManager()",
        "type": "",
        "file": "SecurityManager.swift"
      }
,
      {
        "name": "let query: [String: Any] = [",
        "type": "Any",
        "file": "SecurityManager.swift"
      }
,
      {
        "name": "let status = SecItemAdd(query as CFDictionary, nil)",
        "type": "",
        "file": "SecurityManager.swift"
      }
,
      {
        "name": "let query: [String: Any] = [",
        "type": "Any",
        "file": "SecurityManager.swift"
      }
,
      {
        "name": "var result: AnyObject?",
        "type": "AnyObject",
        "file": "SecurityManager.swift"
      }
,
      {
        "name": "let status = SecItemCopyMatching(query as CFDictionary, &result)",
        "type": "",
        "file": "SecurityManager.swift"
      }
,
      {
        "name": "let data = result as? Data,",
        "type": "",
        "file": "SecurityManager.swift"
      }
,
      {
        "name": "let key = String(data: data, encoding: .utf8) {",
        "type": "data",
        "file": "SecurityManager.swift"
      }
,
      {
        "name": "guard let url = URL(string: urlString),",
        "type": "urlString",
        "file": "SecurityManager.swift"
      }
,
      {
        "name": "let allowedCharacters = CharacterSet.alphanumerics.union(.whitespaces).union(.punctuationCharacters)",
        "type": "",
        "file": "SecurityManager.swift"
      }
      {
        "name": "static let shared = APIKeyManager()",
        "type": "",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "@Published var showingKeySetup = false",
        "type": "",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "@Published var hasValidKey = false",
        "type": "",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "@Published var isConfigured = false",
        "type": "",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "@Published var hasValidGeminiKey = false",
        "type": "",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "private let openAIKeyAccount = "openai_api_key"",
        "type": "",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "private let geminiKeyAccount = "gemini_api_key"",
        "type": "",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "if let envKey = ProcessInfo.processInfo.environment["OPENAI_API_KEY"] {",
        "type": "",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "let hasKey = getOpenAIKey() != nil",
        "type": "",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "let hasGeminiKey = getGeminiKey() != nil",
        "type": "",
        "file": "APIKeyManager.swift"
      }
,
      {
        "name": "if let envKey = ProcessInfo.processInfo.environment["GEMINI_API_KEY"] {",
        "type": "",
        "file": "APIKeyManager.swift"
      }
      {
        "name": "static let minPasswordLength = 12",
        "type": "",
        "file": "SecurityConfig.swift"
      }
,
      {
        "name": "static let sessionTimeout: TimeInterval = 3600 // 1 hour",
        "type": "TimeInterval",
        "file": "SecurityConfig.swift"
      }
,
      {
        "name": "static let maxFailedAttempts = 3",
        "type": "",
        "file": "SecurityConfig.swift"
      }
,
      {
        "name": "static let requiredHTTPS = true",
        "type": "",
        "file": "SecurityConfig.swift"
      }
,
      {
        "name": "static let logSecurityEvents = true",
        "type": "",
        "file": "SecurityConfig.swift"
      }
,
      {
        "name": "static let allowedAPIEndpoints = [",
        "type": "",
        "file": "SecurityConfig.swift"
      }
      {
        "name": "var displayName: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var description: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var description: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var estimatedTime: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var color: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var percentage: Int {",
        "type": "Int",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var description: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var color: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var range: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var color: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var score: Int {",
        "type": "Int",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var description: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "var color: String {",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "let type: RefactoringType",
        "type": "RefactoringType",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "let impact: Impact",
        "type": "Impact",
        "file": "AnalysisTypes.swift"
      }
,
      {
        "name": "let effort: Effort",
        "type": "Effort",
        "file": "AnalysisTypes.swift"
      }
      {
        "name": "var displayName: String {",
        "type": "String",
        "file": "ServiceTypes.swift"
      }
,
      {
        "name": "var description: String {",
        "type": "String",
        "file": "ServiceTypes.swift"
      }
,
      {
        "name": "var keyPrefix: String {",
        "type": "String",
        "file": "ServiceTypes.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "ServiceTypes.swift"
      }
,
      {
        "name": "var description: String {",
        "type": "String",
        "file": "ServiceTypes.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "ServiceTypes.swift"
      }
,
      {
        "name": "var displayName: String {",
        "type": "String",
        "file": "ServiceTypes.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "ServiceTypes.swift"
      }
,
      {
        "name": "var displayName: String {",
        "type": "String",
        "file": "ServiceTypes.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "ServiceTypes.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "ServiceTypes.swift"
      }
,
      {
        "name": "var color: String {",
        "type": "String",
        "file": "ServiceTypes.swift"
      }
,
      {
        "name": "var color: String {",
        "type": "String",
        "file": "ServiceTypes.swift"
      }
      {
        "name": "var errorDescription: String? {",
        "type": "String",
        "file": "AppError.swift"
      }
,
      {
        "name": "case .invalidInput(let message):",
        "type": "",
        "file": "AppError.swift"
      }
,
      {
        "name": "case .fileNotFound(let filename):",
        "type": "",
        "file": "AppError.swift"
      }
,
      {
        "name": "case .networkError(let message):",
        "type": "",
        "file": "AppError.swift"
      }
,
      {
        "name": "case .parsingError(let message):",
        "type": "",
        "file": "AppError.swift"
      }
,
      {
        "name": "case .apiError(let message):",
        "type": "",
        "file": "AppError.swift"
      }
,
      {
        "name": "case .configurationError(let message):",
        "type": "",
        "file": "AppError.swift"
      }
,
      {
        "name": "case .operationFailed(let message):",
        "type": "",
        "file": "AppError.swift"
      }
,
      {
        "name": "case .invalidConfiguration(let message):",
        "type": "",
        "file": "AppError.swift"
      }
      {
        "name": "var color: Color {",
        "type": "Color",
        "file": "CodeTypes.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "CodeTypes.swift"
      }
,
      {
        "name": "var color: Color {",
        "type": "Color",
        "file": "CodeTypes.swift"
      }
,
      {
        "name": "var score: Int {",
        "type": "Int",
        "file": "CodeTypes.swift"
      }
,
      {
        "name": "var color: Color {",
        "type": "Color",
        "file": "CodeTypes.swift"
      }
,
      {
        "name": "var estimatedHours: String {",
        "type": "String",
        "file": "CodeTypes.swift"
      }
,
      {
        "name": "var color: Color {",
        "type": "Color",
        "file": "CodeTypes.swift"
      }
,
      {
        "name": "var priority: Int {",
        "type": "Int",
        "file": "CodeTypes.swift"
      }
      {
        "name": "let record: FileAnalysisRecord",
        "type": "FileAnalysisRecord",
        "file": "EnhancedAnalysisRecordRow.swift"
      }
,
      {
        "name": "@State private var isExpanded = true  // Start expanded so users can see results immediately",
        "type": "",
        "file": "EnhancedAnalysisRecordRow.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "EnhancedAnalysisRecordRow.swift"
      }
,
      {
        "name": "if let aiResult = record.aiAnalysisResult {",
        "type": "",
        "file": "EnhancedAnalysisRecordRow.swift"
      }
,
      {
        "name": "if let lineNumber = item.lineNumber {",
        "type": "",
        "file": "EnhancedAnalysisRecordRow.swift"
      }
,
      {
        "name": "static var previews: some View {",
        "type": "some",
        "file": "EnhancedAnalysisRecordRow.swift"
      }
,
      {
        "name": "let sampleFile = CodeFile(",
        "type": "",
        "file": "EnhancedAnalysisRecordRow.swift"
      }
,
      {
        "name": "let sampleAnalysisResults = [",
        "type": "",
        "file": "EnhancedAnalysisRecordRow.swift"
      }
,
      {
        "name": "let sampleRecord = FileAnalysisRecord(",
        "type": "",
        "file": "EnhancedAnalysisRecordRow.swift"
      }
      {
        "name": "static let shared = PerformanceTracker()",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "private var startTimes: [String: CFTimeInterval] = [:]",
        "type": "CFTimeInterval",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "private var performanceMetrics: [PerformanceMetric] = []",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "guard let startTime = startTimes[operation] else {",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let endTime = CFAbsoluteTimeGetCurrent()",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let duration = endTime - startTime",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let metric = PerformanceMetric(",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "if let operation = operation {",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let metrics = getMetrics(for: operation)",
        "type": "operation",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let totalTime = metrics.reduce(0) { $0 + $1.duration }",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "var info = mach_task_basic_info()",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "var count = mach_msg_type_number_t(MemoryLayout<mach_task_basic_info>.size) / 4",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let result = withUnsafeMutablePointer(to: &info) {",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "var report = "# Performance Report\n\n"",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let totalTime = performanceMetrics.reduce(0) { $0 + $1.duration }",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let averageTime = totalTime / Double(performanceMetrics.count)",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let slowestMetric = performanceMetrics.max { $0.duration < $1.duration }",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "if let slowest = slowestMetric {",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let slowest = getSlowestOperations(limit: 5)",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let operation: String",
        "type": "String",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let duration: TimeInterval",
        "type": "TimeInterval",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let timestamp: Date",
        "type": "Date",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let memoryUsage: UInt64",
        "type": "UInt64",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "var formattedDuration: String {",
        "type": "String",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "var formattedMemoryUsage: String {",
        "type": "String",
        "file": "PerformanceTracker.swift"
      }
,
      {
        "name": "let mb = Double(memoryUsage) / 1024.0 / 1024.0",
        "type": "",
        "file": "PerformanceTracker.swift"
      }
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@StateObject private var fixGenerator = IntelligentFixGenerator()",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var selectedFixes: Set<UUID> = []",
        "type": "Set",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var showingDiffPreview = false",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var previewFix: IntelligentFix?",
        "type": "IntelligentFix",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var appliedFixes: [UUID] = []",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var showingApplyConfirmation = false",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let analysis: EnhancedAnalysisResult",
        "type": "EnhancedAnalysisResult",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let originalCode: String",
        "type": "String",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let onFixesApplied: (String) -> Void",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "if let fix = previewFix {",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let context = CodeContext(",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "if let firstFix = fixGenerator.generatedFixes.first(where: { selectedFixes.contains($0.id) }) {",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "var modifiedCode = originalCode",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let sortedFixes = fixGenerator.generatedFixes",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let totalFixes: Int",
        "type": "Int",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let selectedCount: Int",
        "type": "Int",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let onSelectAll: () -> Void",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let onDeselectAll: () -> Void",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let progress: Double",
        "type": "Double",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let fixes: [IntelligentFix]",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@Binding var selectedFixes: Set<UUID>",
        "type": "Set",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let appliedFixes: [UUID]",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let onPreviewFix: (IntelligentFix) -> Void",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let fix: IntelligentFix",
        "type": "IntelligentFix",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let isSelected: Bool",
        "type": "Bool",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let isApplied: Bool",
        "type": "Bool",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let onToggleSelection: () -> Void",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let onPreview: () -> Void",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let confidence: Double",
        "type": "Double",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "private var confidenceColor: Color {",
        "type": "Color",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let impact: FixImpact",
        "type": "FixImpact",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "private var impactColor: Color {",
        "type": "Color",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let hasSelectedFixes: Bool",
        "type": "Bool",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let onApplySelected: () -> Void",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "let onPreviewSelected: () -> Void",
        "type": "",
        "file": "FixApplicationView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FixApplicationView.swift"
      }
      {
        "name": "@Published var isAnalyzing = false",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "@Published var analysisProgress: Double = 0.0",
        "type": "Double",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "@Published var detectedPatterns: [DetectedPattern] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "@Published var codeSmells: [CodeSmell] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "@Published var architectureInsights: ArchitectureInsights?",
        "type": "ArchitectureInsights",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "@Published var performanceIssues: [PerformanceIssue] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "private let logger = AppLogger.shared",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var patterns: [DetectedPattern] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var smells: [CodeSmell] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let insights = ArchitectureInsights(",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var issues: [PerformanceIssue] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var patterns: [DetectedPattern] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "if code.contains("static let shared") || code.contains("static var shared") {",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let location = findCodeLocation(for: "shared", in: code)",
        "type": "code",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let pattern = DetectedPattern(",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let location = findCodeLocation(for: "__new__", in: code)",
        "type": "code",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let pattern = DetectedPattern(",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var patterns: [DetectedPattern] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let location = findCodeLocation(for: "Observer", in: code)",
        "type": "code",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let pattern = DetectedPattern(",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var patterns: [DetectedPattern] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let location = findCodeLocation(for: "Factory", in: code)",
        "type": "code",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let pattern = DetectedPattern(",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var patterns: [DetectedPattern] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let location = findCodeLocation(for: "ViewModel", in: code)",
        "type": "code",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let pattern = DetectedPattern(",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var patterns: [DetectedPattern] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let location = findCodeLocation(for: "inject", in: code)",
        "type": "code",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let pattern = DetectedPattern(",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let fileCount = files.count",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let averageFileSize = files.map { $0.size }.reduce(0, +) / max(fileCount, 1)",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var score = 80.0 // Base score",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var issues: [PerformanceIssue] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var issues: [PerformanceIssue] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var issues: [PerformanceIssue] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var issues: [PerformanceIssue] = []",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let lines = code.components(separatedBy: .newlines)",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let id = UUID()",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let name: String",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let codeLocation: CodeLocation",
        "type": "CodeLocation",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let confidence: Double",
        "type": "Double",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let suggestion: String?",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let relatedPatterns: [String]",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var confidencePercentage: Int {",
        "type": "Int",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let id = UUID()",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let type: CodeSmellType",
        "type": "CodeSmellType",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let severity: CodeSmellSeverity",
        "type": "CodeSmellSeverity",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let location: CodeLocation",
        "type": "CodeLocation",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let suggestion: String",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let impact: CodeSmellImpact",
        "type": "CodeSmellImpact",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let line: Int",
        "type": "Int",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let column: Int",
        "type": "Int",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let fileName: String",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let overallScore: Double",
        "type": "Double",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let layeringSuggestions: [LayeringSuggestion]",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let couplingAnalysis: CouplingAnalysis",
        "type": "CouplingAnalysis",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let cohesionAnalysis: CohesionAnalysis",
        "type": "CohesionAnalysis",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let dependencyGraph: DependencyGraph",
        "type": "DependencyGraph",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let recommendations: [ArchitectureRecommendation]",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let layer: String",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let files: [CodeFile]",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let quality: LayerQuality",
        "type": "LayerQuality",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let suggestions: [String]",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let overallLevel: CouplingLevel",
        "type": "CouplingLevel",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let tightlyCooupledModules: [String]",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let suggestions: [String]",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let score: Double",
        "type": "Double",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let overallLevel: CohesionLevel",
        "type": "CohesionLevel",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let lowCohesionModules: [String]",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let suggestions: [String]",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let score: Double",
        "type": "Double",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let nodes: [DependencyNode]",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let edges: [DependencyEdge]",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let cyclicDependencies: [String]",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let criticalPath: [String]",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let name: String",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let type: NodeType",
        "type": "NodeType",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let from: String",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let to: String",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let type: EdgeType",
        "type": "EdgeType",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let type: RecommendationType",
        "type": "RecommendationType",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let priority: Priority",
        "type": "Priority",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let impact: String",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let effort: Effort",
        "type": "Effort",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let id = UUID()",
        "type": "",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let type: PerformanceIssueType",
        "type": "PerformanceIssueType",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let severity: PerformanceIssueSeverity",
        "type": "PerformanceIssueSeverity",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let location: CodeLocation",
        "type": "CodeLocation",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let suggestion: String",
        "type": "String",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "let estimatedImpact: PerformanceImpact",
        "type": "PerformanceImpact",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var color: Color {",
        "type": "Color",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var color: Color {",
        "type": "Color",
        "file": "PatternRecognitionEngine.swift"
      }
,
      {
        "name": "var color: Color {",
        "type": "Color",
        "file": "PatternRecognitionEngine.swift"
      }
      {
        "name": "var emoji: String {",
        "type": "String",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "private let logger = Logger(subsystem: "com.DanielStevens.CodingReviewer", category: "CodeAnalysis")",
        "type": "",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "private var performanceMetrics: [String: Date] = [:]",
        "type": "Date",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "static let shared = AppLogger()",
        "type": "",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "let filename = (file as NSString).lastPathComponent",
        "type": "",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "let logMessage = "\(category.emoji) \(level.rawValue) [\(filename):\(line)] \(function) - \(message)"",
        "type": "",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "let startTime = Date()",
        "type": "",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "let duration = Date().timeIntervalSince(startTime)",
        "type": "",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "let status = success ? "successful" : "failed"",
        "type": "",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "var errorDescription: String? {",
        "type": "String",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "case .invalidInput(let reason):",
        "type": "",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "var recoverySuggestion: String? {",
        "type": "String",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "private var analysisMetrics: [String: TimeInterval] = [:]",
        "type": "TimeInterval",
        "file": "AppLogger.swift"
      }
,
      {
        "name": "let duration = Date().timeIntervalSince(startTime)",
        "type": "",
        "file": "AppLogger.swift"
      }
      {
        "name": "@Published var isGeneratingFixes = false",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "@Published var fixGenerationProgress: Double = 0.0",
        "type": "Double",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "@Published var generatedFixes: [IntelligentFix] = []",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "private let logger = AppLogger.shared",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "var fixes: [IntelligentFix] = []",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let securityFixes = generateSecurityFixes(analysis: analysis, context: context)",
        "type": "analysis
context",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let performanceFixes = generatePerformanceFixes(analysis: analysis, context: context)",
        "type": "analysis
context",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let styleFixes = generateStyleFixes(analysis: analysis, context: context)",
        "type": "analysis
context",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let logicFixes = generateLogicFixes(analysis: analysis, context: context)",
        "type": "analysis
context",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let sortedFixes = fixes.sorted { $0.confidence > $1.confidence }",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let lines = code.components(separatedBy: .newlines)",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "var modifiedLines = lines",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let lineRange = fix.startLine...min(fix.endLine, lines.count - 1)",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let fixedLines = fix.fixedCode.components(separatedBy: .newlines)",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let isValid = fix.confidence > 0.7",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let compilationCheck = await performCompilationCheck(fix: fix, context: context)",
        "type": "fix
context",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "var fixes: [IntelligentFix] = []",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let code = context.originalCode",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "var fixes: [IntelligentFix] = []",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let lines = code.components(separatedBy: .newlines)",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "if let range = line.range(of: #"(\w+)!"#, options: .regularExpression) {",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let variableName = String(line[range]).dropLast()",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let safeFix = line.replacingOccurrences(of: "\(variableName)!", with: "\(variableName) ?? defaultValue")",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let fix = IntelligentFix(",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "var fixes: [IntelligentFix] = []",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let code = context.originalCode",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "var fixes: [IntelligentFix] = []",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let lines = code.components(separatedBy: .newlines)",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let nextLine = lines[index + 1]",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let fix = IntelligentFix(",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "var fixes: [IntelligentFix] = []",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let code = context.originalCode",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "var fixes: [IntelligentFix] = []",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let code = context.originalCode",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let patterns = ["password\\s*=\\s*\"", "api_key\\s*=\\s*\"", "secret\\s*=\\s*\""]",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "var components: [String] = []",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let result = components.joined()",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let id: UUID",
        "type": "UUID",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let originalCode: String",
        "type": "String",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let fixedCode: String",
        "type": "String",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let startLine: Int",
        "type": "Int",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let endLine: Int",
        "type": "Int",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let confidence: Double",
        "type": "Double",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let category: FixCategory",
        "type": "FixCategory",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let explanation: String",
        "type": "String",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let impact: FixImpact",
        "type": "FixImpact",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "var confidencePercentage: Int {",
        "type": "Int",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let originalCode: String",
        "type": "String",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let fileName: String",
        "type": "String",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let language: String",
        "type": "String",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let projectContext: [String: Any]?",
        "type": "Any",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let isValid: Bool",
        "type": "Bool",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let confidence: Double",
        "type": "Double",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let compilationCheck: CompilationCheck",
        "type": "CompilationCheck",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let potentialIssues: [String]",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let recommendation: FixRecommendation",
        "type": "FixRecommendation",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let passes: Bool",
        "type": "Bool",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let errors: [String]",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let warnings: [String]",
        "type": "",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "let duration: TimeInterval",
        "type": "TimeInterval",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "var icon: String {",
        "type": "String",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "var color: Color {",
        "type": "Color",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "var priority: Int {",
        "type": "Int",
        "file": "IntelligentFixGenerator.swift"
      }
,
      {
        "name": "var errorDescription: String? {",
        "type": "String",
        "file": "IntelligentFixGenerator.swift"
      }
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@StateObject private var keyManager: APIKeyManager",
        "type": "APIKeyManager",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@StateObject private var viewModel: CodeReviewViewModel",
        "type": "CodeReviewViewModel",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@StateObject private var sharedDataManager = SharedDataManager.shared",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var selectedTab: Tab = .analysis",
        "type": "Tab",
        "file": "ContentView.swift"
      }
,
      {
        "name": "let keyManager = APIKeyManager()",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var systemImage: String {",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@ObservedObject var viewModel: CodeReviewViewModel",
        "type": "CodeReviewViewModel",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var showingLanguagePicker = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "let suggestion: AISuggestion",
        "type": "AISuggestion",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isExpanded = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "private var severityColor: Color {",
        "type": "Color",
        "file": "ContentView.swift"
      }
,
      {
        "name": "private var typeIcon: String {",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@ObservedObject var viewModel: CodeReviewViewModel",
        "type": "CodeReviewViewModel",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "let result: AnalysisResult",
        "type": "AnalysisResult",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@ObservedObject var viewModel: CodeReviewViewModel",
        "type": "CodeReviewViewModel",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "private var severityIcon: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "let fix: CodeFix",
        "type": "CodeFix",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@ObservedObject var viewModel: CodeReviewViewModel",
        "type": "CodeReviewViewModel",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@ObservedObject var keyManager: APIKeyManager",
        "type": "APIKeyManager",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var showingSettings = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "if let url = URL(string: "https://openai.com/api/") {",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "let icon: String",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "let aiResult: AIAnalysisResponse",
        "type": "AIAnalysisResponse",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@ObservedObject var viewModel: CodeReviewViewModel",
        "type": "CodeReviewViewModel",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "if let documentation = aiResult.documentation, !documentation.isEmpty {",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@ObservedObject var keyManager: APIKeyManager",
        "type": "APIKeyManager",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@ObservedObject var viewModel: CodeReviewViewModel",
        "type": "CodeReviewViewModel",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var selectedAIProvider = "OpenAI"",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var showingProviderPicker = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var showingGeminiKeyInput = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var tempGeminiKey = """,
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@Binding var tempKey: String",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@ObservedObject var keyManager: APIKeyManager",
        "type": "APIKeyManager",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@Environment(\.dismiss) private var dismiss",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isValidating = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var validationResult: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "if let result = validationResult {",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "let isValid = await keyManager.validateGeminiKey(tempKey)",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@Binding var selectedProvider: String",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@Environment(\.dismiss) private var dismiss",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "let providers = ["OpenAI", "Google Gemini"]",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@Binding var selectedLanguage: CodeLanguage",
        "type": "CodeLanguage",
        "file": "ContentView.swift"
      }
,
      {
        "name": "@Environment(\.dismiss) private var dismiss",
        "type": "",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "ContentView.swift"
      }
,
      {
        "name": "var displayName: String {",
        "type": "String",
        "file": "ContentView.swift"
      }
      {
        "name": "static let shared = SharedDataManager()",
        "type": "",
        "file": "SharedDataManager.swift"
      }
,
      {
        "name": "@Published var fileManager: FileManagerService",
        "type": "FileManagerService",
        "file": "SharedDataManager.swift"
      }
,
      {
        "name": "var sharedFileManager: FileManagerService {",
        "type": "FileManagerService",
        "file": "SharedDataManager.swift"
      }
,
      {
        "name": "static let defaultValue: FileManagerService = SharedDataManager.shared.fileManager",
        "type": "FileManagerService",
        "file": "SharedDataManager.swift"
      }
,
      {
        "name": "var fileManager: FileManagerService {",
        "type": "FileManagerService",
        "file": "SharedDataManager.swift"
      }
      {
        "name": "var errorDescription: String? {",
        "type": "String",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "case .accessDenied(let filename):",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "case .fileTooLarge(let filename, let size, let maxSize):",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let sizeStr = ByteCountFormatter.string(fromByteCount: Int64(size), countStyle: .file)",
        "type": "Int64",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let maxSizeStr = ByteCountFormatter.string(fromByteCount: Int64(maxSize), countStyle: .file)",
        "type": "Int64",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "case .unsupportedFileType(let type):",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "case .fileNotReadable(let filename):",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "case .notARegularFile(let filename):",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "case .directoryEnumerationFailed(let path):",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "case .encodingError(let filename):",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "case .networkError(let error):",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let maxFileSize: Int",
        "type": "Int",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let maxFilesPerUpload: Int",
        "type": "Int",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let supportedFileTypes: Set<String>",
        "type": "Set",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let name: String",
        "type": "String",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let path: String",
        "type": "String",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let content: String",
        "type": "String",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let fileExtension: String",
        "type": "String",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let size: Int",
        "type": "Int",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "var displaySize: String {",
        "type": "String",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let successfulFiles: [FileData]",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let failedFiles: [(String, Error)]",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let warnings: [String]",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "var hasErrors: Bool { !failedFiles.isEmpty }",
        "type": "Bool",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "var hasWarnings: Bool { !warnings.isEmpty }",
        "type": "Bool",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "@Published var isUploading: Bool = false",
        "type": "Bool",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "@Published var uploadProgress: Double = 0.0",
        "type": "Double",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "@Published var errorMessage: String?",
        "type": "String",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "private let configuration: FileUploadConfiguration",
        "type": "FileUploadConfiguration",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "private let logger = FileUploadLogger()",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "var successfulFiles: [FileData] = []",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "var failedFiles: [(String, Error)] = []",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "var warnings: [String] = []",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let totalFiles = urls.count",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let resourceValues = try url.resourceValues(forKeys: [.isDirectoryKey])",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let directoryResult = try await uploadDirectory(at: url)",
        "type": "url",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let file = try await uploadSingleFile(from: url)",
        "type": "url",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let result = SimpleUploadResult(",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let canAccess = url.startAccessingSecurityScopedResource()",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let content = try readFileContent(from: url)",
        "type": "url",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let file = FileData(",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "var successfulFiles: [FileData] = []",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "var failedFiles: [(String, Error)] = []",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "var warnings: [String] = []",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let fileManager = Foundation.FileManager.default",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let canAccess = url.startAccessingSecurityScopedResource()",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let enumerator = fileManager.enumerator(",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "guard let enumerator = enumerator else {",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let contents = try fileManager.contentsOfDirectory(at: url, includingPropertiesForKeys: [.isRegularFileKey], options: [.skipsHiddenFiles])",
        "type": "url",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let file = try await uploadSingleFile(from: fileURL)",
        "type": "fileURL",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "var fileCount = 0",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let enumeratorArray = enumerator.allObjects as! [URL]",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let resourceValues = try fileURL.resourceValues(forKeys: [.isRegularFileKey])",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let file = try await uploadSingleFile(from: fileURL)",
        "type": "fileURL",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let resourceValues = try url.resourceValues(forKeys: [",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "if let fileSize = resourceValues.fileSize, fileSize > configuration.maxFileSize {",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let fileExtension = url.pathExtension.lowercased()",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let data = try Data(contentsOf: url)",
        "type": "url",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let content = String(data: data, encoding: .utf8) ??",
        "type": "data",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let fileName = (file as NSString).lastPathComponent",
        "type": "",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let timestamp = DateFormatter.uploadLogFormatter.string(from: Date())",
        "type": "Date",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "fileprivate static let uploadLogFormatter: DateFormatter = {",
        "type": "DateFormatter",
        "file": "FileUploadManager.swift"
      }
,
      {
        "name": "let formatter = DateFormatter()",
        "type": "",
        "file": "FileUploadManager.swift"
      }
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@EnvironmentObject private var fileManager: FileManagerService",
        "type": "FileManagerService",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var showingFileImporter = false",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var showingFolderPicker = false",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var isTargeted = false",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var uploadResult: FileUploadResult?",
        "type": "FileUploadResult",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var showingUploadResults = false",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var selectedFiles: Set<CodeFile.ID> = []",
        "type": "Set",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var showingAnalysisResults = false",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var analysisRecords: [FileAnalysisRecord] = []",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var sheetAnalysisRecords: [FileAnalysisRecord] = []",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "if let result = uploadResult {",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "if let errorMessage = fileManager.errorMessage {",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var headerView: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var statisticsView: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var emptyStateView: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var contentView: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var sidebarView: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var mainContentView: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var selectionInfoView: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var secondaryDropZone: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var fileDetailsView: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let selectedFilesList = fileManager.uploadedFiles.filter { selectedFiles.contains($0.id) }",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var toolbarButtons: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "case .success(let urls):",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let result = try await fileManager.uploadFiles(from: urls)",
        "type": "urls",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "case .failure(let error):",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let panel = NSOpenPanel()",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "if panel.runModal() == .OK, let url = panel.url {",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let result = try await fileManager.uploadFiles(from: [url])",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "var urls: [URL] = []",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "if let data = item as? Data, let url = URL(dataRepresentation: data, relativeTo: nil) {",
        "type": "data
nil",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let result = try await fileManager.uploadFiles(from: urls)",
        "type": "urls",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let projectFileIds = Set(project.files.map(\.id))",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let filesToAnalyze = fileManager.uploadedFiles.filter { selectedFiles.contains($0.id) }",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let records = try await fileManager.analyzeMultipleFiles(filesToAnalyze, withAI: true)",
        "type": "true",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let records = try await fileManager.analyzeMultipleFiles(fileManager.uploadedFiles, withAI: true)",
        "type": "true",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let panel = NSSavePanel()",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "if panel.runModal() == .OK, let url = panel.url {",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let name: String",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let path: String",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let language: String",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let size: Int",
        "type": "Int",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let lastModified: String",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let exportData = fileManager.uploadedFiles.map { file in",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let encoder = JSONEncoder()",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let data = try encoder.encode(exportData)",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "var message = """,
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let icon: String",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let value: String",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let color: Color",
        "type": "Color",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let title: String",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let icon: String",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let file: CodeFile",
        "type": "CodeFile",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let isSelected: Bool",
        "type": "Bool",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let onTap: () -> Void",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let project: ProjectStructure",
        "type": "ProjectStructure",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let onSelect: () -> Void",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let onDelete: () -> Void",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let file: CodeFile",
        "type": "CodeFile",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "let onDelete: () -> Void",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var errorMessage: String?",
        "type": "String",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@State private var isLoading = false",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@Binding var records: [FileAnalysisRecord]",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "@Environment(\.dismiss) private var dismiss",
        "type": "",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var totalIssues: Int {",
        "type": "Int",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var criticalIssues: Int {",
        "type": "Int",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var highIssues: Int {",
        "type": "Int",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var mediumIssues: Int {",
        "type": "Int",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "private var lowIssues: Int {",
        "type": "Int",
        "file": "FileUploadView.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "FileUploadView.swift"
      }
      {
        "name": "@EnvironmentObject var fileManager: FileManagerService",
        "type": "FileManagerService",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "@State private var diagnosticResults: [DiagnosticResult] = []",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "@State private var isRunning = false",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "var results: [DiagnosticResult] = []",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let test1 = await testSharedDataManagerSingleton()",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let test2 = await testFileManagerConsistency()",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let test3 = await testUploadedFilesAccess()",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let test4 = await testCrossViewDataSharing()",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let test5 = await testAIInsightsViewState()",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let test6 = await testPatternAnalysisViewState()",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let manager1 = SharedDataManager.shared",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let manager2 = SharedDataManager.shared",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let isEqualReference = manager1 === manager2",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let sharedManager = SharedDataManager.shared",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let fileManager1 = sharedManager.fileManager",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let fileManager2 = sharedManager.getFileManager()",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let isConsistent = fileManager1 === fileManager2",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let initialCount = fileManager.uploadedFiles.count",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let testFile = CodeFile(",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let newCount = fileManager.uploadedFiles.count",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let canAccess = newCount == initialCount + 1",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "if let index = fileManager.uploadedFiles.firstIndex(where: { $0.id == testFile.id }) {",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let sharedManager = SharedDataManager.shared",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let environmentFileManager = fileManager",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let isSameInstance = sharedManager.fileManager === environmentFileManager",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let hasFiles = !fileManager.uploadedFiles.isEmpty",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let hasAnalysis = !fileManager.analysisHistory.isEmpty",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let expectedState: String",
        "type": "String",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let files = fileManager.uploadedFiles",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let languageGroups = Dictionary(grouping: files, by: { $0.language })",
        "type": "files",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let uniqueLanguages = languageGroups.keys.count",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let canGroup = !files.isEmpty && uniqueLanguages > 0",
        "type": "",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let id: UUID",
        "type": "UUID",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let testName: String",
        "type": "String",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let description: String",
        "type": "String",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let passed: Bool",
        "type": "Bool",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let details: String",
        "type": "String",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let severity: DiagnosticSeverity",
        "type": "DiagnosticSeverity",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "var color: Color {",
        "type": "Color",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "var icon: String {",
        "type": "String",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let result: DiagnosticResult",
        "type": "DiagnosticResult",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "@EnvironmentObject var fileManager: FileManagerService",
        "type": "FileManagerService",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "var body: some View {",
        "type": "some",
        "file": "DataFlowDiagnostics.swift"
      }
,
      {
        "name": "let languageGroups = Dictionary(grouping: fileManager.uploadedFiles, by: { $0.language })",
        "type": "fileManager",
        "file": "DataFlowDiagnostics.swift"
      }

    ],
    "protocols": [
      {"name": "CodeReviewService", "file": "CodeReviewViewModel.swift"}
      {"name": "CodeAnalyzer", "file": "CodeAnalyzers.swift"}
      {"name": "AIServiceProtocol", "file": "AIServiceProtocol.swift"}

    ],
    "imports": [
      "Accessibility"
,
      "Combine"
,
      "CryptoKit"
,
      "Foundation"
,
      "OSLog"
,
      "Security"
,
      "SwiftData"
,
      "SwiftUI"
,
      "UniformTypeIdentifiers"
,
      "os"
,
      "os.log"

    ]
  }
}
