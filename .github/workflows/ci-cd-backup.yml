name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  XCODE_VERSION: "15.0"
  iOS_SIMULATOR: "iPhone 15 Pro"
  iOS_VERSION: "17.0"

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: macos-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer
      
    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-xcode-${{ hashFiles('**/Package.swift', '**/*.xcodeproj') }}
        restore-keys: |
          ${{ runner.os }}-xcode-
          
    - name: Install SwiftLint
      run: |
        if ! command -v swiftlint &> /dev/null; then
          brew install swiftlint
        fi
        
    - name: Run SwiftLint
      run: |
        swiftlint --reporter github-actions-logging
        
    - name: Run Security Scanner
      run: |
        chmod +x advanced_security_scanner.sh
        ./advanced_security_scanner.sh
        
    - name: Run Complexity Analysis
      run: |
        chmod +x ai_refactoring_analyzer.sh
        ./ai_refactoring_analyzer.sh
        
    - name: Build Project
      run: |
        xcodebuild -scheme CodingReviewer \
                   -destination "platform=macOS" \
                   clean build \
                   CODE_SIGNING_ALLOWED=NO
                   
    - name: Run Unit Tests
      run: |
        xcodebuild test \
                   -scheme CodingReviewer \
                   -destination "platform=macOS" \
                   CODE_SIGNING_ALLOWED=NO
                   
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          security_reports/
          refactoring_reports/
          quality_reports/
          
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🤖 Automated Quality Report\n\n';
          
          // Add security report if exists
          try {
            const securityFiles = fs.readdirSync('security_reports/');
            if (securityFiles.length > 0) {
              comment += '### 🛡️ Security Analysis\n';
              comment += '✅ Security scan completed - check artifacts for details\n\n';
            }
          } catch (e) {
            comment += '### 🛡️ Security Analysis\n';
            comment += '⚠️ No security reports found\n\n';
          }
          
          // Add refactoring report if exists
          try {
            const refactoringFiles = fs.readdirSync('refactoring_reports/');
            if (refactoringFiles.length > 0) {
              comment += '### 🧠 Complexity Analysis\n';
              comment += '✅ Complexity analysis completed - check artifacts for details\n\n';
            }
          } catch (e) {
            comment += '### 🧠 Complexity Analysis\n';
            comment += '⚠️ No refactoring reports found\n\n';
          }
          
          comment += '### 📊 Build Status\n';
          comment += '${{ job.status == "success" && "✅" || "❌" }} Build and tests completed\n\n';
          comment += '_This comment was generated automatically by GitHub Actions_';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  security-scan:
    name: Advanced Security Scanning
    runs-on: macos-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Run Comprehensive Security Scan
      run: |
        chmod +x automated_security_fixes.sh
        ./automated_security_fixes.sh
        
    - name: Create Security Issue if Critical Findings
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const reportFiles = fs.readdirSync('security_reports/');
            const latestReport = reportFiles
              .filter(f => f.includes('security_'))
              .sort()
              .pop();
              
            if (latestReport) {
              const reportContent = fs.readFileSync(`security_reports/${latestReport}`, 'utf8');
              
              // Check for critical issues
              if (reportContent.includes('CRITICAL') || reportContent.includes('HIGH')) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `🚨 Critical Security Issues Detected - ${new Date().toISOString().split('T')[0]}`,
                  body: `## Automated Security Scan Results\n\n` +
                        `A security scan has detected critical issues that require immediate attention.\n\n` +
                        `**Scan Date:** ${new Date().toISOString()}\n\n` +
                        `**Action Required:** Please review the security report in the artifacts and address critical findings.\n\n` +
                        `**Report:** Check the workflow artifacts for detailed findings.\n\n` +
                        `This issue was created automatically by the security scanning workflow.`,
                  labels: ['security', 'critical', 'automated']
                });
              }
            }
          } catch (error) {
            console.log('No security reports found or error reading reports:', error);
          }

  performance-monitoring:
    name: Performance Monitoring
    runs-on: macos-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Select Xcode Version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer
      
    - name: Measure Build Performance
      run: |
        echo "📊 Measuring build performance..."
        
        start_time=$(date +%s)
        xcodebuild -scheme CodingReviewer \
                   -destination "platform=macOS" \
                   clean build \
                   CODE_SIGNING_ALLOWED=NO
        end_time=$(date +%s)
        
        build_duration=$((end_time - start_time))
        echo "Build completed in ${build_duration} seconds"
        
        # Store performance metrics
        mkdir -p performance_reports
        echo "{\"build_duration\": ${build_duration}, \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}" > performance_reports/build_metrics.json
        
    - name: Upload Performance Metrics
      uses: actions/upload-artifact@v3
      with:
        name: performance-metrics
        path: performance_reports/

  code-quality-metrics:
    name: Code Quality Metrics
    runs-on: macos-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Install Analysis Tools
      run: |
        brew install swiftlint
        
    - name: Generate Quality Metrics
      run: |
        mkdir -p quality_reports
        
        # SwiftLint metrics
        swiftlint --reporter json > quality_reports/swiftlint_results.json || true
        
        # Code statistics
        echo "📊 Generating code statistics..."
        
        # Count lines of code
        total_lines=$(find CodingReviewer -name "*.swift" -exec wc -l {} + | tail -1 | awk '{print $1}')
        
        # Count files
        file_count=$(find CodingReviewer -name "*.swift" | wc -l | tr -d ' ')
        
        # Count functions
        function_count=$(grep -r "func " CodingReviewer --include="*.swift" | wc -l | tr -d ' ')
        
        # Generate metrics JSON
        cat > quality_reports/code_metrics.json << EOF
        {
          "total_lines": ${total_lines},
          "file_count": ${file_count},
          "function_count": ${function_count},
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
        
        echo "Code metrics generated:"
        cat quality_reports/code_metrics.json
        
    - name: Upload Quality Reports
      uses: actions/upload-artifact@v3
      with:
        name: quality-reports
        path: quality_reports/
