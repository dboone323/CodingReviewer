//
// MLHealthMonitor.swift
// CodingReviewer
//
// ML Integration Health Monitoring System
// Created on August 3, 2025
//

import Foundation
import SwiftUI
import Combine

@MainActor
final class MLHealthMonitor: ObservableObject {
    @Published var healthStatus: MLHealthStatus = .unknown
    @Published var lastCheck: Date?
    @Published var issues: [MLHealthIssue] = []
    @Published var recentFilesCount: Int = 0
    @Published var isMonitoring: Bool = false
    
    private let logger = AppLogger.shared
    private var healthTimer: Timer?
    private var cancellables = Set<AnyCancellable>()
    
    struct MLHealthStatus: Codable {
        let status: HealthLevel
        let timestamp: Date
        let recentFilesCount: Int
        let issues: [String]
        let lastRefresh: Date
        
        enum HealthLevel: String, Codable, CaseIterable {
            case healthy = "healthy"
            case warning = "warning"
            case unhealthy = "unhealthy"
            case unknown = "unknown"
            
            var color: Color {
                switch self {
                case .healthy: return .green
                case .warning: return .orange
                case .unhealthy: return .red
                case .unknown: return .gray
                }
            }
            
            var icon: String {
                switch self {
                case .healthy: return "checkmark.circle.fill"
                case .warning: return "exclamationmark.triangle.fill"
                case .unhealthy: return "xmark.circle.fill"
                case .unknown: return "questionmark.circle.fill"
                }
            }
        }
    }
    
    struct MLHealthIssue: Identifiable, Hashable {
        let id = UUID()
        let type: IssueType
        let description: String
        let severity: Severity
        let detectedAt: Date
        
        enum IssueType {
            case missingDirectory
            case staleData
            case scriptError
            case permissionError
            case networkError
        }
        
        enum Severity {
            case low, medium, high, critical
            
            var color: Color {
                switch self {
                case .low: return .blue
                case .medium: return .orange
                case .high: return .red
                case .critical: return .purple
                }
            }
        }
    }
    
    init() {
        logger.log("🏥 ML Health Monitor initialized", level: .info, category: .ai)
        startHealthMonitoring()
    }
    
    deinit {
        stopHealthMonitoring()
    }
    
    // MARK: - Health Monitoring
    
    func startHealthMonitoring() {
        guard !isMonitoring else { return }
        
        isMonitoring = true
        logger.log("🚀 Starting ML health monitoring", level: .info, category: .ai)
        
        // Initial health check
        Task {
            await performHealthCheck()
        }
        
        // Periodic health checks every 5 minutes
        healthTimer = Timer.scheduledTimer(withTimeInterval: 300, repeats: true) { _ in
            Task { @MainActor in
                await self.performHealthCheck()
            }
        }
    }
    
    func stopHealthMonitoring() {
        healthTimer?.invalidate()
        healthTimer = nil
        isMonitoring = false
        logger.log("⏹️ ML health monitoring stopped", level: .info, category: .ai)
    }
    
    func performHealthCheck() async {
        logger.log("🔍 Performing ML health check", level: .info, category: .ai)
        
        var detectedIssues: [MLHealthIssue] = []
        var filesCount = 0
        var overallStatus: MLHealthStatus.HealthLevel = .healthy
        
        // Check ML directories
        let requiredDirectories = [
            ".ml_automation",
            ".predictive_analytics", 
            ".cross_project_learning"
        ]
        
        for directory in requiredDirectories {
            if !FileManager.default.fileExists(atPath: directory) {
                detectedIssues.append(MLHealthIssue(
                    type: .missingDirectory,
                    description: "Missing ML directory: \(directory)",
                    severity: .high,
                    detectedAt: Date()
                ))
                overallStatus = .unhealthy
            }
        }
        
        // Check for recent data files
        let calendar = Calendar.current
        let yesterday = calendar.date(byAdding: .day, value: -1, to: Date()) ?? Date()
        
        if let enumerator = FileManager.default.enumerator(atPath: ".") {
            for case let file as String in enumerator {
                if file.contains("ml") || file.contains("predictive") || file.contains("cross") {
                    if let attributes = try? FileManager.default.attributesOfItem(atPath: file),
                       let modDate = attributes[.modificationDate] as? Date,
                       modDate > yesterday {
                        filesCount += 1
                    }
                }
            }
        }
        
        if filesCount == 0 {
            detectedIssues.append(MLHealthIssue(
                type: .staleData,
                description: "No recent ML data files found (last 24 hours)",
                severity: .medium,
                detectedAt: Date()
            ))
            if overallStatus == .healthy {
                overallStatus = .warning
            }
        }
        
        // Check ML health status file
        await checkMLHealthStatusFile(&detectedIssues, &overallStatus)
        
        // Update published properties
        await MainActor.run {
            self.issues = detectedIssues
            self.recentFilesCount = filesCount
            self.lastCheck = Date()
            
            // Create health status
            let newStatus = MLHealthStatus(
                status: overallStatus,
                timestamp: Date(),
                recentFilesCount: filesCount,
                issues: detectedIssues.map { $0.description },
                lastRefresh: Date()
            )
            
            // Update if status changed
            if self.healthStatus.status != overallStatus {
                self.healthStatus = newStatus
                self.logHealthStatusChange(newStatus)
            }
        }
        
        logger.log("✅ Health check completed: \(overallStatus.rawValue) (\(filesCount) recent files, \(detectedIssues.count) issues)", level: .info, category: .ai)
    }
    
    private func checkMLHealthStatusFile(_ issues: inout [MLHealthIssue], _ status: inout MLHealthStatus.HealthLevel) async {
        let healthFile = "ml_health_status.json"
        
        guard FileManager.default.fileExists(atPath: healthFile) else {
            issues.append(MLHealthIssue(
                type: .missingDirectory,
                description: "ML health status file not found",
                severity: .low,
                detectedAt: Date()
            ))
            return
        }
        
        do {
            let data = try Data(contentsOf: URL(fileURLWithPath: healthFile))
            let healthStatus = try JSONDecoder().decode(MLHealthStatus.self, from: data)
            
            // Check if health status is stale (older than 1 hour)
            if Date().timeIntervalSince(healthStatus.timestamp) > 3600 {
                issues.append(MLHealthIssue(
                    type: .staleData,
                    description: "ML health status file is stale",
                    severity: .medium,
                    detectedAt: Date()
                ))
            }
            
        } catch {
            issues.append(MLHealthIssue(
                type: .scriptError,
                description: "Failed to parse ML health status: \(error.localizedDescription)",
                severity: .medium,
                detectedAt: Date()
            ))
        }
    }
    
    private func logHealthStatusChange(_ status: MLHealthStatus) {
        let message = "🏥 ML Health Status Changed: \(status.status.rawValue.uppercased())"
        let level: AppLogger.LogLevel = {
            switch status.status {
            case .healthy: return .info
            case .warning: return .warning
            case .unhealthy: return .error
            case .unknown: return .info
            }
        }()
        
        logger.log(message, level: level, category: .ai)
        
        // Log issues
        for issue in issues {
            logger.log("  Issue: \(issue.description)", level: .warning, category: .ai)
        }
    }
    
    // MARK: - Manual Actions
    
    func triggerMLRefresh() async {
        logger.log("🔄 Manually triggering ML data refresh", level: .info, category: .ai)
        
        let task = Process()
        task.executableURL = URL(fileURLWithPath: "/bin/bash")
        task.arguments = ["-c", "cd '\(FileManager.default.currentDirectoryPath)' && ./ml_maintenance_automation.sh"]
        
        do {
            try task.run()
            task.waitUntilExit()
            
            // Perform health check after refresh
            await performHealthCheck()
            
            logger.log("✅ Manual ML refresh completed", level: .info, category: .ai)
        } catch {
            logger.log("❌ Manual ML refresh failed: \(error)", level: .error, category: .ai)
        }
    }
    
    func exportHealthReport() -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
        
        var report = "# ML Integration Health Report\n"
        report += "Generated: \(formatter.string(from: Date()))\n\n"
        
        report += "## Overall Status: \(healthStatus.status.rawValue.uppercased())\n"
        report += "- Last Check: \(lastCheck.map { formatter.string(from: $0) } ?? "Never")\n"
        report += "- Recent Files: \(recentFilesCount)\n"
        report += "- Issues Found: \(issues.count)\n\n"
        
        if !issues.isEmpty {
            report += "## Issues Detected:\n"
            for (index, issue) in issues.enumerated() {
                report += "\(index + 1). **\(issue.severity)**: \(issue.description)\n"
                report += "   Detected: \(formatter.string(from: issue.detectedAt))\n\n"
            }
        }
        
        return report
    }
}

// MARK: - Health Monitor View Component

struct MLHealthStatusView: View {
    @ObservedObject var healthMonitor: MLHealthMonitor
    @State private var showingDetails = false
    
    var body: some View {
        HStack(spacing: 12) {
            // Status Icon
            Image(systemName: healthMonitor.healthStatus.status.icon)
                .foregroundColor(healthMonitor.healthStatus.status.color)
                .font(.title2)
            
            VStack(alignment: .leading, spacing: 4) {
                Text("ML Integration Health")
                    .font(.headline)
                
                Text("\(healthMonitor.healthStatus.status.rawValue.capitalized) • \(healthMonitor.recentFilesCount) recent files")
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                if !healthMonitor.issues.isEmpty {
                    Text("\(healthMonitor.issues.count) issues detected")
                        .font(.caption)
                        .foregroundColor(.orange)
                }
            }
            
            Spacer()
            
            // Action Buttons
            HStack(spacing: 8) {
                Button("Refresh") {
                    Task {
                        await healthMonitor.triggerMLRefresh()
                    }
                }
                .buttonStyle(.bordered)
                
                Button("Details") {
                    showingDetails = true
                }
                .buttonStyle(.bordered)
            }
        }
        .padding()
        .background(Color(.controlBackgroundColor))
        .cornerRadius(8)
        .sheet(isPresented: $showingDetails) {
            MLHealthDetailsView(healthMonitor: healthMonitor)
        }
    }
}

struct MLHealthDetailsView: View {
    @ObservedObject var healthMonitor: MLHealthMonitor
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            List {
                Section("Status Overview") {
                    HStack {
                        Image(systemName: healthMonitor.healthStatus.status.icon)
                            .foregroundColor(healthMonitor.healthStatus.status.color)
                        Text(healthMonitor.healthStatus.status.rawValue.capitalized)
                        Spacer()
                        Text("\(healthMonitor.recentFilesCount) files")
                            .foregroundColor(.secondary)
                    }
                }
                
                if !healthMonitor.issues.isEmpty {
                    Section("Issues") {
                        ForEach(healthMonitor.issues) { issue in
                            VStack(alignment: .leading, spacing: 4) {
                                HStack {
                                    Circle()
                                        .fill(issue.severity.color)
                                        .frame(width: 8, height: 8)
                                    Text(issue.description)
                                        .font(.system(.body, design: .monospaced))
                                }
                                
                                Text("Detected: \(issue.detectedAt.formatted())")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                        }
                    }
                }
                
                Section("Actions") {
                    Button("Trigger ML Refresh") {
                        Task {
                            await healthMonitor.triggerMLRefresh()
                        }
                    }
                    
                    Button("Export Health Report") {
                        let report = healthMonitor.exportHealthReport()
                        // Save to file or share
                        print(report)
                    }
                }
            }
            .navigationTitle("ML Health Monitor")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") {
                        dismiss()
                    }
                }
            }
        }
    }
}
