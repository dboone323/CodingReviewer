# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/

## compatibility with Xcode 8 and earlier (ignoring not required starting Xcode 9)
*.xcscmblueprint
*.xccheckout

## compatibility with Xcode 3 and earlier (ignoring not required starting Xcode 4)
build/
DerivedData/
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

## Obj-C/Swift specific
*.hmap

## App packaging
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
# Package.pins
# Package.resolved
# *.xcodeproj
#
# Xcode automatically generates this directory with a .xcworkspacedata file and xcuserdata
# hence it is not needed unless you have added a package configuration file to your project
# .swiftpm

.build/

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/
#
# Add this line if you want to avoid checking in source code from the Xcode workspace
# *.xcworkspace

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build/

# Accio dependency management
Dependencies/
.accio/

# fastlane
#
# It is recommended to not store the screenshots in the git repo.
# Instead, use fastlane to re-generate the screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

# Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# IDE and Editor files
*.swp
*.swo
*~
.vscode/
.idea/

# Backup files
*.bak
*.backup

# Temporary files
*.tmp
*.temp

# Log files
*.log

# Environment variables
.env
.env.local
.env.production

# AI and ML model files (if large)
*.mlmodel
*.mlpackage

# Documentation build artifacts
docs/_build/

# Automation Reports and Generated Files
.advanced_cicd_enhancement/
.automation_enhancements/reports/
.intelligent_*/reports/
.master_automation/
.proactive_error_prevention/predictions_log.txt
.cross_project_learning/recommendations/
automation_*.log
*_report_*.md
*_log.txt
*.pid
.orchestrator_cycle
.last_*_backup
.*_complete

# Backup directories
*_backup_*/
*_refactoring_backup_*/
# Performance optimization caches
.build_cache/
.security_cache/
.ai_cache/
.performance_monitoring/

# Jupyter notebook cache and outputs
.jupyter/
.ipynb_checkpoints/

# System diagnosis and validation files
.system_diagnosis/
.validation_log

# Temporary Swift files and backups
*.swift.complex
*.swift.backup*
DisabledTests/

# Automation and analysis scripts (temporary)
add_documentation.swift
analyze_build_errors.sh
automated_quality_enhancement.sh
comprehensive_*.sh
critical_error_fixes.sh
debug_ml.sh
enhanced_*.sh
final_*.sh
fix_*.sh
improved_*.sh
launch_enhanced.sh
master_enhanced_workflow.sh
ml_pattern_recognition*.sh
phase*_*.sh
priority*_*.sh
quality_improvement_*.sh
quick_*.sh
refactoring_suggestions.md
robust_*.sh
simple_*.sh
strategic_*.sh
system_diagnosis.sh
unified_*.sh
validate_*.sh
validation_script.sh
